// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for Status.
const (
	INTERNALERROR   Status = "INTERNAL_ERROR"
	INVALIDARGUMENT Status = "INVALID_ARGUMENT"
	NOTFOUND        Status = "NOT_FOUND"
	OK              Status = "OK"
)

// Attributes defines model for Attributes.
type Attributes map[string]string

// ContainerRegistry defines model for ContainerRegistry.
type ContainerRegistry struct {
	Id                 string     `json:"id"`
	RegistryAttributes Attributes `json:"registryAttributes"`
	RegistryType       string     `json:"registryType"`
	RegistryUrl        string     `json:"registryUrl"`
}

// ContainerRegistryResponse defines model for ContainerRegistryResponse.
type ContainerRegistryResponse struct {
	Registry      *ContainerRegistry `json:"registry,omitempty"`
	Status        Status             `json:"status"`
	StatusMessage string             `json:"statusMessage"`
}

// GitProject defines model for GitProject.
type GitProject struct {
	AccessToken string `json:"accessToken"`
	Id          string `json:"id"`
	ProjectUrl  string `json:"projectUrl"`
	Username    string `json:"username"`
}

// GitProjectResponse defines model for GitProjectResponse.
type GitProjectResponse struct {
	Project       GitProject `json:"project"`
	Status        Status     `json:"status"`
	StatusMessage string     `json:"statusMessage"`
}

// Status defines model for Status.
type Status string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of APIs provided by the service
	// (GET /api-docs)
	GetApiDocs(c *gin.Context)
	// Get container Registry by ID
	// (GET /containerregistry/{id})
	GetContainerRegistryById(c *gin.Context, id string)
	// Get git project details by ID
	// (GET /gitproject/{id})
	GetGitProjectById(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiDocs operation middleware
func (siw *ServerInterfaceWrapper) GetApiDocs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiDocs(c)
}

// GetContainerRegistryById operation middleware
func (siw *ServerInterfaceWrapper) GetContainerRegistryById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetContainerRegistryById(c, id)
}

// GetGitProjectById operation middleware
func (siw *ServerInterfaceWrapper) GetGitProjectById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGitProjectById(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api-docs", wrapper.GetApiDocs)
	router.GET(options.BaseURL+"/containerregistry/:id", wrapper.GetContainerRegistryById)
	router.GET(options.BaseURL+"/gitproject/:id", wrapper.GetGitProjectById)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVTXPaPBD+K5p936Mb0/bmmxsowySBjCG9ZDIZxV4cpVhSpXVmGIb/3pGwwcTG0Ft7",
	"C8ruo+dDu95AqgqtJEqyEG3Apq9YcP9nTGTES0nof/EsEySU5Kt7ozQaErtzWmuECCwZIXPYBvWBennD",
	"lNzBtZLEhUSTYC4smbVr00cgIuuEMlXDMZP/DS4hgv/CA/Owoh02Khv9Cw/cc8GDWXX83xf8KoXBDKJH",
	"R/K4o5Pgh1ufLjEkQauVtNg2xjQs69Pd9ngbgCVO5VnL5ruqff0dWstzPO+HNsor2l/0EaFL+1jQfdXX",
	"EsvTFK1dqJ8oO9M68UoqHt0ZBlBaNJIXeGHADbTgiFEDqV/Y6TT1QXlfIg2P/tIU53tOKMvCwcxuIIDJ",
	"dDFKpvHt8yhJZok/+BHfTobPcTJ+uBtNFxDAdLZ4/j57mA4bwHtqLmS5VA44Q5saod3KgQiuuSaULM5R",
	"EptplCwZzRcsvp8wqzEVS5FyXxoACVphf8v8Q8s7Gru75/PV4GrgFCqNkmsBEXz1RwFoTq9ecsi1+JSp",
	"1P/I0cfpUvZokwwiGCPFWgxdiTN79xx8+ZfBoC1uduNTsWVRcDfqcCssMbV0XC3TRr2LDDP2smb0isyi",
	"eRcp+pYwree+XhThRmTbBrHjm8ZIbN/C6l3hkCdDCNoqWmvl23rih4QbXiChsRA9bkA4bOcPBLAbtXpZ",
	"1u+MTIlB9XHpepNP3T45rii9EK71qkosfLNKHj5Wf7wb9wPqH9yZLHot8xnkgqohOm9+LohVxSxD4mJl",
	"T7t/2AP/ou0dC/FSv0+75BHcBNQelG7rQwjbp+3vAAAA//+jPGf+ywgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
