// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: capten_sdk.proto

package captensdkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaptenSdkClient is the client API for CaptenSdk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptenSdkClient interface {
	GetGitProjectById(ctx context.Context, in *GetGitProjectByIdRequest, opts ...grpc.CallOption) (*GetGitProjectByIdResponse, error)
	GetContainerRegistryById(ctx context.Context, in *GetContainerRegistryByIdRequest, opts ...grpc.CallOption) (*GetContainerRegistryByIdResponse, error)
	AddPluginUsage(ctx context.Context, in *AddPluginUsageRequest, opts ...grpc.CallOption) (*AddPluginUsageResponse, error)
	RemovePluginUsage(ctx context.Context, in *RemovePluginUsageRequest, opts ...grpc.CallOption) (*RemovePluginUsageResponse, error)
}

type captenSdkClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptenSdkClient(cc grpc.ClientConnInterface) CaptenSdkClient {
	return &captenSdkClient{cc}
}

func (c *captenSdkClient) GetGitProjectById(ctx context.Context, in *GetGitProjectByIdRequest, opts ...grpc.CallOption) (*GetGitProjectByIdResponse, error) {
	out := new(GetGitProjectByIdResponse)
	err := c.cc.Invoke(ctx, "/captensdkpb.capten_sdk/GetGitProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenSdkClient) GetContainerRegistryById(ctx context.Context, in *GetContainerRegistryByIdRequest, opts ...grpc.CallOption) (*GetContainerRegistryByIdResponse, error) {
	out := new(GetContainerRegistryByIdResponse)
	err := c.cc.Invoke(ctx, "/captensdkpb.capten_sdk/GetContainerRegistryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenSdkClient) AddPluginUsage(ctx context.Context, in *AddPluginUsageRequest, opts ...grpc.CallOption) (*AddPluginUsageResponse, error) {
	out := new(AddPluginUsageResponse)
	err := c.cc.Invoke(ctx, "/captensdkpb.capten_sdk/AddPluginUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenSdkClient) RemovePluginUsage(ctx context.Context, in *RemovePluginUsageRequest, opts ...grpc.CallOption) (*RemovePluginUsageResponse, error) {
	out := new(RemovePluginUsageResponse)
	err := c.cc.Invoke(ctx, "/captensdkpb.capten_sdk/RemovePluginUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptenSdkServer is the server API for CaptenSdk service.
// All implementations must embed UnimplementedCaptenSdkServer
// for forward compatibility
type CaptenSdkServer interface {
	GetGitProjectById(context.Context, *GetGitProjectByIdRequest) (*GetGitProjectByIdResponse, error)
	GetContainerRegistryById(context.Context, *GetContainerRegistryByIdRequest) (*GetContainerRegistryByIdResponse, error)
	AddPluginUsage(context.Context, *AddPluginUsageRequest) (*AddPluginUsageResponse, error)
	RemovePluginUsage(context.Context, *RemovePluginUsageRequest) (*RemovePluginUsageResponse, error)
	mustEmbedUnimplementedCaptenSdkServer()
}

// UnimplementedCaptenSdkServer must be embedded to have forward compatible implementations.
type UnimplementedCaptenSdkServer struct {
}

func (UnimplementedCaptenSdkServer) GetGitProjectById(context.Context, *GetGitProjectByIdRequest) (*GetGitProjectByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitProjectById not implemented")
}
func (UnimplementedCaptenSdkServer) GetContainerRegistryById(context.Context, *GetContainerRegistryByIdRequest) (*GetContainerRegistryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerRegistryById not implemented")
}
func (UnimplementedCaptenSdkServer) AddPluginUsage(context.Context, *AddPluginUsageRequest) (*AddPluginUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPluginUsage not implemented")
}
func (UnimplementedCaptenSdkServer) RemovePluginUsage(context.Context, *RemovePluginUsageRequest) (*RemovePluginUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePluginUsage not implemented")
}
func (UnimplementedCaptenSdkServer) mustEmbedUnimplementedCaptenSdkServer() {}

// UnsafeCaptenSdkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptenSdkServer will
// result in compilation errors.
type UnsafeCaptenSdkServer interface {
	mustEmbedUnimplementedCaptenSdkServer()
}

func RegisterCaptenSdkServer(s grpc.ServiceRegistrar, srv CaptenSdkServer) {
	s.RegisterService(&CaptenSdk_ServiceDesc, srv)
}

func _CaptenSdk_GetGitProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitProjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenSdkServer).GetGitProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captensdkpb.capten_sdk/GetGitProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenSdkServer).GetGitProjectById(ctx, req.(*GetGitProjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenSdk_GetContainerRegistryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRegistryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenSdkServer).GetContainerRegistryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captensdkpb.capten_sdk/GetContainerRegistryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenSdkServer).GetContainerRegistryById(ctx, req.(*GetContainerRegistryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenSdk_AddPluginUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPluginUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenSdkServer).AddPluginUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captensdkpb.capten_sdk/AddPluginUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenSdkServer).AddPluginUsage(ctx, req.(*AddPluginUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenSdk_RemovePluginUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePluginUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenSdkServer).RemovePluginUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captensdkpb.capten_sdk/RemovePluginUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenSdkServer).RemovePluginUsage(ctx, req.(*RemovePluginUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptenSdk_ServiceDesc is the grpc.ServiceDesc for CaptenSdk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptenSdk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "captensdkpb.capten_sdk",
	HandlerType: (*CaptenSdkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGitProjectById",
			Handler:    _CaptenSdk_GetGitProjectById_Handler,
		},
		{
			MethodName: "GetContainerRegistryById",
			Handler:    _CaptenSdk_GetContainerRegistryById_Handler,
		},
		{
			MethodName: "AddPluginUsage",
			Handler:    _CaptenSdk_AddPluginUsage_Handler,
		},
		{
			MethodName: "RemovePluginUsage",
			Handler:    _CaptenSdk_RemovePluginUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "capten_sdk.proto",
}
