// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: capten_plugins.proto

package captenpluginspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CaptenPlugins_GetCaptenPlugins_FullMethodName            = "/captenpluginspb.capten_plugins/GetCaptenPlugins"
	CaptenPlugins_AddGitProject_FullMethodName               = "/captenpluginspb.capten_plugins/AddGitProject"
	CaptenPlugins_UpdateGitProject_FullMethodName            = "/captenpluginspb.capten_plugins/UpdateGitProject"
	CaptenPlugins_DeleteGitProject_FullMethodName            = "/captenpluginspb.capten_plugins/DeleteGitProject"
	CaptenPlugins_GetGitProjects_FullMethodName              = "/captenpluginspb.capten_plugins/GetGitProjects"
	CaptenPlugins_GetGitProjectsForLabels_FullMethodName     = "/captenpluginspb.capten_plugins/GetGitProjectsForLabels"
	CaptenPlugins_GetTektonPipelines_FullMethodName          = "/captenpluginspb.capten_plugins/GetTektonPipelines"
	CaptenPlugins_CreateTektonPipeline_FullMethodName        = "/captenpluginspb.capten_plugins/CreateTektonPipeline"
	CaptenPlugins_UpdateTektonPipeline_FullMethodName        = "/captenpluginspb.capten_plugins/UpdateTektonPipeline"
	CaptenPlugins_DeleteTektonPipeline_FullMethodName        = "/captenpluginspb.capten_plugins/DeleteTektonPipeline"
	CaptenPlugins_AddContainerRegistry_FullMethodName        = "/captenpluginspb.capten_plugins/AddContainerRegistry"
	CaptenPlugins_UpdateContainerRegistry_FullMethodName     = "/captenpluginspb.capten_plugins/UpdateContainerRegistry"
	CaptenPlugins_DeleteContainerRegistry_FullMethodName     = "/captenpluginspb.capten_plugins/DeleteContainerRegistry"
	CaptenPlugins_GetContainerRegistry_FullMethodName        = "/captenpluginspb.capten_plugins/GetContainerRegistry"
	CaptenPlugins_AddCloudProvider_FullMethodName            = "/captenpluginspb.capten_plugins/AddCloudProvider"
	CaptenPlugins_UpdateCloudProvider_FullMethodName         = "/captenpluginspb.capten_plugins/UpdateCloudProvider"
	CaptenPlugins_DeleteCloudProvider_FullMethodName         = "/captenpluginspb.capten_plugins/DeleteCloudProvider"
	CaptenPlugins_GetCloudProviders_FullMethodName           = "/captenpluginspb.capten_plugins/GetCloudProviders"
	CaptenPlugins_GetCloudProvidersWithFilter_FullMethodName = "/captenpluginspb.capten_plugins/GetCloudProvidersWithFilter"
	CaptenPlugins_RegisterArgoCDProject_FullMethodName       = "/captenpluginspb.capten_plugins/RegisterArgoCDProject"
	CaptenPlugins_GetArgoCDProjects_FullMethodName           = "/captenpluginspb.capten_plugins/GetArgoCDProjects"
	CaptenPlugins_UnRegisterArgoCDProject_FullMethodName     = "/captenpluginspb.capten_plugins/UnRegisterArgoCDProject"
	CaptenPlugins_RegisterTektonProject_FullMethodName       = "/captenpluginspb.capten_plugins/RegisterTektonProject"
	CaptenPlugins_GetTektonProject_FullMethodName            = "/captenpluginspb.capten_plugins/GetTektonProject"
	CaptenPlugins_UnRegisterTektonProject_FullMethodName     = "/captenpluginspb.capten_plugins/UnRegisterTektonProject"
	CaptenPlugins_AddCrossplanProvider_FullMethodName        = "/captenpluginspb.capten_plugins/AddCrossplanProvider"
	CaptenPlugins_DeleteCrossplanProvider_FullMethodName     = "/captenpluginspb.capten_plugins/DeleteCrossplanProvider"
	CaptenPlugins_GetCrossplanProviders_FullMethodName       = "/captenpluginspb.capten_plugins/GetCrossplanProviders"
	CaptenPlugins_UpdateCrossplanProvider_FullMethodName     = "/captenpluginspb.capten_plugins/UpdateCrossplanProvider"
	CaptenPlugins_RegisterCrossplaneProject_FullMethodName   = "/captenpluginspb.capten_plugins/RegisterCrossplaneProject"
	CaptenPlugins_GetCrossplaneProject_FullMethodName        = "/captenpluginspb.capten_plugins/GetCrossplaneProject"
	CaptenPlugins_UnRegisterCrossplaneProject_FullMethodName = "/captenpluginspb.capten_plugins/UnRegisterCrossplaneProject"
	CaptenPlugins_GetManagedClusters_FullMethodName          = "/captenpluginspb.capten_plugins/GetManagedClusters"
	CaptenPlugins_GetManagedClusterKubeconfig_FullMethodName = "/captenpluginspb.capten_plugins/GetManagedClusterKubeconfig"
)

// CaptenPluginsClient is the client API for CaptenPlugins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptenPluginsClient interface {
	GetCaptenPlugins(ctx context.Context, in *GetCaptenPluginsRequest, opts ...grpc.CallOption) (*GetCaptenPluginsResponse, error)
	AddGitProject(ctx context.Context, in *AddGitProjectRequest, opts ...grpc.CallOption) (*AddGitProjectResponse, error)
	UpdateGitProject(ctx context.Context, in *UpdateGitProjectRequest, opts ...grpc.CallOption) (*UpdateGitProjectResponse, error)
	DeleteGitProject(ctx context.Context, in *DeleteGitProjectRequest, opts ...grpc.CallOption) (*DeleteGitProjectResponse, error)
	GetGitProjects(ctx context.Context, in *GetGitProjectsRequest, opts ...grpc.CallOption) (*GetGitProjectsResponse, error)
	GetGitProjectsForLabels(ctx context.Context, in *GetGitProjectsForLabelsRequest, opts ...grpc.CallOption) (*GetGitProjectsForLabelsResponse, error)
	GetTektonPipelines(ctx context.Context, in *GetTektonPipelinesRequest, opts ...grpc.CallOption) (*GetTektonPipelinesResponse, error)
	CreateTektonPipeline(ctx context.Context, in *CreateTektonPipelineRequest, opts ...grpc.CallOption) (*CreateTektonPipelineResponse, error)
	UpdateTektonPipeline(ctx context.Context, in *UpdateTektonPipelineRequest, opts ...grpc.CallOption) (*UpdateTektonPipelineResponse, error)
	DeleteTektonPipeline(ctx context.Context, in *DeleteTektonPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonPipelineResponse, error)
	AddContainerRegistry(ctx context.Context, in *AddContainerRegistryRequest, opts ...grpc.CallOption) (*AddContainerRegistryResponse, error)
	UpdateContainerRegistry(ctx context.Context, in *UpdateContainerRegistryRequest, opts ...grpc.CallOption) (*UpdateContainerRegistryResponse, error)
	DeleteContainerRegistry(ctx context.Context, in *DeleteContainerRegistryRequest, opts ...grpc.CallOption) (*DeleteContainerRegistryResponse, error)
	GetContainerRegistry(ctx context.Context, in *GetContainerRegistryRequest, opts ...grpc.CallOption) (*GetContainerRegistryResponse, error)
	AddCloudProvider(ctx context.Context, in *AddCloudProviderRequest, opts ...grpc.CallOption) (*AddCloudProviderResponse, error)
	UpdateCloudProvider(ctx context.Context, in *UpdateCloudProviderRequest, opts ...grpc.CallOption) (*UpdateCloudProviderResponse, error)
	DeleteCloudProvider(ctx context.Context, in *DeleteCloudProviderRequest, opts ...grpc.CallOption) (*DeleteCloudProviderResponse, error)
	GetCloudProviders(ctx context.Context, in *GetCloudProvidersRequest, opts ...grpc.CallOption) (*GetCloudProvidersResponse, error)
	GetCloudProvidersWithFilter(ctx context.Context, in *GetCloudProvidersWithFilterRequest, opts ...grpc.CallOption) (*GetCloudProvidersWithFilterResponse, error)
	RegisterArgoCDProject(ctx context.Context, in *RegisterArgoCDProjectRequest, opts ...grpc.CallOption) (*RegisterArgoCDProjectResponse, error)
	GetArgoCDProjects(ctx context.Context, in *GetArgoCDProjectsRequest, opts ...grpc.CallOption) (*GetArgoCDProjectsResponse, error)
	UnRegisterArgoCDProject(ctx context.Context, in *UnRegisterArgoCDProjectRequest, opts ...grpc.CallOption) (*UnRegisterArgoCDProjectResponse, error)
	RegisterTektonProject(ctx context.Context, in *RegisterTektonProjectRequest, opts ...grpc.CallOption) (*RegisterTektonProjectResponse, error)
	GetTektonProject(ctx context.Context, in *GetTektonProjectRequest, opts ...grpc.CallOption) (*GetTektonProjectResponse, error)
	UnRegisterTektonProject(ctx context.Context, in *UnRegisterTektonProjectRequest, opts ...grpc.CallOption) (*UnRegisterTektonProjectResponse, error)
	AddCrossplanProvider(ctx context.Context, in *AddCrossplanProviderRequest, opts ...grpc.CallOption) (*AddCrossplanProviderResponse, error)
	DeleteCrossplanProvider(ctx context.Context, in *DeleteCrossplanProviderRequest, opts ...grpc.CallOption) (*DeleteCrossplanProviderResponse, error)
	GetCrossplanProviders(ctx context.Context, in *GetCrossplanProvidersRequest, opts ...grpc.CallOption) (*GetCrossplanProvidersResponse, error)
	UpdateCrossplanProvider(ctx context.Context, in *UpdateCrossplanProviderRequest, opts ...grpc.CallOption) (*UpdateCrossplanProviderResponse, error)
	RegisterCrossplaneProject(ctx context.Context, in *RegisterCrossplaneProjectRequest, opts ...grpc.CallOption) (*RegisterCrossplaneProjectResponse, error)
	GetCrossplaneProject(ctx context.Context, in *GetCrossplaneProjectsRequest, opts ...grpc.CallOption) (*GetCrossplaneProjectsResponse, error)
	UnRegisterCrossplaneProject(ctx context.Context, in *UnRegisterCrossplaneProjectRequest, opts ...grpc.CallOption) (*UnRegisterCrossplaneProjectResponse, error)
	GetManagedClusters(ctx context.Context, in *GetManagedClustersRequest, opts ...grpc.CallOption) (*GetManagedClustersResponse, error)
	GetManagedClusterKubeconfig(ctx context.Context, in *GetManagedClusterKubeconfigRequest, opts ...grpc.CallOption) (*GetManagedClusterKubeconfigResponse, error)
}

type captenPluginsClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptenPluginsClient(cc grpc.ClientConnInterface) CaptenPluginsClient {
	return &captenPluginsClient{cc}
}

func (c *captenPluginsClient) GetCaptenPlugins(ctx context.Context, in *GetCaptenPluginsRequest, opts ...grpc.CallOption) (*GetCaptenPluginsResponse, error) {
	out := new(GetCaptenPluginsResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetCaptenPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) AddGitProject(ctx context.Context, in *AddGitProjectRequest, opts ...grpc.CallOption) (*AddGitProjectResponse, error) {
	out := new(AddGitProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_AddGitProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UpdateGitProject(ctx context.Context, in *UpdateGitProjectRequest, opts ...grpc.CallOption) (*UpdateGitProjectResponse, error) {
	out := new(UpdateGitProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UpdateGitProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) DeleteGitProject(ctx context.Context, in *DeleteGitProjectRequest, opts ...grpc.CallOption) (*DeleteGitProjectResponse, error) {
	out := new(DeleteGitProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_DeleteGitProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetGitProjects(ctx context.Context, in *GetGitProjectsRequest, opts ...grpc.CallOption) (*GetGitProjectsResponse, error) {
	out := new(GetGitProjectsResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetGitProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetGitProjectsForLabels(ctx context.Context, in *GetGitProjectsForLabelsRequest, opts ...grpc.CallOption) (*GetGitProjectsForLabelsResponse, error) {
	out := new(GetGitProjectsForLabelsResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetGitProjectsForLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetTektonPipelines(ctx context.Context, in *GetTektonPipelinesRequest, opts ...grpc.CallOption) (*GetTektonPipelinesResponse, error) {
	out := new(GetTektonPipelinesResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetTektonPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) CreateTektonPipeline(ctx context.Context, in *CreateTektonPipelineRequest, opts ...grpc.CallOption) (*CreateTektonPipelineResponse, error) {
	out := new(CreateTektonPipelineResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_CreateTektonPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UpdateTektonPipeline(ctx context.Context, in *UpdateTektonPipelineRequest, opts ...grpc.CallOption) (*UpdateTektonPipelineResponse, error) {
	out := new(UpdateTektonPipelineResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UpdateTektonPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) DeleteTektonPipeline(ctx context.Context, in *DeleteTektonPipelineRequest, opts ...grpc.CallOption) (*DeleteTektonPipelineResponse, error) {
	out := new(DeleteTektonPipelineResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_DeleteTektonPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) AddContainerRegistry(ctx context.Context, in *AddContainerRegistryRequest, opts ...grpc.CallOption) (*AddContainerRegistryResponse, error) {
	out := new(AddContainerRegistryResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_AddContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UpdateContainerRegistry(ctx context.Context, in *UpdateContainerRegistryRequest, opts ...grpc.CallOption) (*UpdateContainerRegistryResponse, error) {
	out := new(UpdateContainerRegistryResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UpdateContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) DeleteContainerRegistry(ctx context.Context, in *DeleteContainerRegistryRequest, opts ...grpc.CallOption) (*DeleteContainerRegistryResponse, error) {
	out := new(DeleteContainerRegistryResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_DeleteContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetContainerRegistry(ctx context.Context, in *GetContainerRegistryRequest, opts ...grpc.CallOption) (*GetContainerRegistryResponse, error) {
	out := new(GetContainerRegistryResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) AddCloudProvider(ctx context.Context, in *AddCloudProviderRequest, opts ...grpc.CallOption) (*AddCloudProviderResponse, error) {
	out := new(AddCloudProviderResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_AddCloudProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UpdateCloudProvider(ctx context.Context, in *UpdateCloudProviderRequest, opts ...grpc.CallOption) (*UpdateCloudProviderResponse, error) {
	out := new(UpdateCloudProviderResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UpdateCloudProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) DeleteCloudProvider(ctx context.Context, in *DeleteCloudProviderRequest, opts ...grpc.CallOption) (*DeleteCloudProviderResponse, error) {
	out := new(DeleteCloudProviderResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_DeleteCloudProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetCloudProviders(ctx context.Context, in *GetCloudProvidersRequest, opts ...grpc.CallOption) (*GetCloudProvidersResponse, error) {
	out := new(GetCloudProvidersResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetCloudProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetCloudProvidersWithFilter(ctx context.Context, in *GetCloudProvidersWithFilterRequest, opts ...grpc.CallOption) (*GetCloudProvidersWithFilterResponse, error) {
	out := new(GetCloudProvidersWithFilterResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetCloudProvidersWithFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) RegisterArgoCDProject(ctx context.Context, in *RegisterArgoCDProjectRequest, opts ...grpc.CallOption) (*RegisterArgoCDProjectResponse, error) {
	out := new(RegisterArgoCDProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_RegisterArgoCDProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetArgoCDProjects(ctx context.Context, in *GetArgoCDProjectsRequest, opts ...grpc.CallOption) (*GetArgoCDProjectsResponse, error) {
	out := new(GetArgoCDProjectsResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetArgoCDProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UnRegisterArgoCDProject(ctx context.Context, in *UnRegisterArgoCDProjectRequest, opts ...grpc.CallOption) (*UnRegisterArgoCDProjectResponse, error) {
	out := new(UnRegisterArgoCDProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UnRegisterArgoCDProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) RegisterTektonProject(ctx context.Context, in *RegisterTektonProjectRequest, opts ...grpc.CallOption) (*RegisterTektonProjectResponse, error) {
	out := new(RegisterTektonProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_RegisterTektonProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetTektonProject(ctx context.Context, in *GetTektonProjectRequest, opts ...grpc.CallOption) (*GetTektonProjectResponse, error) {
	out := new(GetTektonProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetTektonProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UnRegisterTektonProject(ctx context.Context, in *UnRegisterTektonProjectRequest, opts ...grpc.CallOption) (*UnRegisterTektonProjectResponse, error) {
	out := new(UnRegisterTektonProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UnRegisterTektonProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) AddCrossplanProvider(ctx context.Context, in *AddCrossplanProviderRequest, opts ...grpc.CallOption) (*AddCrossplanProviderResponse, error) {
	out := new(AddCrossplanProviderResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_AddCrossplanProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) DeleteCrossplanProvider(ctx context.Context, in *DeleteCrossplanProviderRequest, opts ...grpc.CallOption) (*DeleteCrossplanProviderResponse, error) {
	out := new(DeleteCrossplanProviderResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_DeleteCrossplanProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetCrossplanProviders(ctx context.Context, in *GetCrossplanProvidersRequest, opts ...grpc.CallOption) (*GetCrossplanProvidersResponse, error) {
	out := new(GetCrossplanProvidersResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetCrossplanProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UpdateCrossplanProvider(ctx context.Context, in *UpdateCrossplanProviderRequest, opts ...grpc.CallOption) (*UpdateCrossplanProviderResponse, error) {
	out := new(UpdateCrossplanProviderResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UpdateCrossplanProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) RegisterCrossplaneProject(ctx context.Context, in *RegisterCrossplaneProjectRequest, opts ...grpc.CallOption) (*RegisterCrossplaneProjectResponse, error) {
	out := new(RegisterCrossplaneProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_RegisterCrossplaneProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetCrossplaneProject(ctx context.Context, in *GetCrossplaneProjectsRequest, opts ...grpc.CallOption) (*GetCrossplaneProjectsResponse, error) {
	out := new(GetCrossplaneProjectsResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetCrossplaneProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) UnRegisterCrossplaneProject(ctx context.Context, in *UnRegisterCrossplaneProjectRequest, opts ...grpc.CallOption) (*UnRegisterCrossplaneProjectResponse, error) {
	out := new(UnRegisterCrossplaneProjectResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_UnRegisterCrossplaneProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetManagedClusters(ctx context.Context, in *GetManagedClustersRequest, opts ...grpc.CallOption) (*GetManagedClustersResponse, error) {
	out := new(GetManagedClustersResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetManagedClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captenPluginsClient) GetManagedClusterKubeconfig(ctx context.Context, in *GetManagedClusterKubeconfigRequest, opts ...grpc.CallOption) (*GetManagedClusterKubeconfigResponse, error) {
	out := new(GetManagedClusterKubeconfigResponse)
	err := c.cc.Invoke(ctx, CaptenPlugins_GetManagedClusterKubeconfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptenPluginsServer is the server API for CaptenPlugins service.
// All implementations must embed UnimplementedCaptenPluginsServer
// for forward compatibility
type CaptenPluginsServer interface {
	GetCaptenPlugins(context.Context, *GetCaptenPluginsRequest) (*GetCaptenPluginsResponse, error)
	AddGitProject(context.Context, *AddGitProjectRequest) (*AddGitProjectResponse, error)
	UpdateGitProject(context.Context, *UpdateGitProjectRequest) (*UpdateGitProjectResponse, error)
	DeleteGitProject(context.Context, *DeleteGitProjectRequest) (*DeleteGitProjectResponse, error)
	GetGitProjects(context.Context, *GetGitProjectsRequest) (*GetGitProjectsResponse, error)
	GetGitProjectsForLabels(context.Context, *GetGitProjectsForLabelsRequest) (*GetGitProjectsForLabelsResponse, error)
	GetTektonPipelines(context.Context, *GetTektonPipelinesRequest) (*GetTektonPipelinesResponse, error)
	CreateTektonPipeline(context.Context, *CreateTektonPipelineRequest) (*CreateTektonPipelineResponse, error)
	UpdateTektonPipeline(context.Context, *UpdateTektonPipelineRequest) (*UpdateTektonPipelineResponse, error)
	DeleteTektonPipeline(context.Context, *DeleteTektonPipelineRequest) (*DeleteTektonPipelineResponse, error)
	AddContainerRegistry(context.Context, *AddContainerRegistryRequest) (*AddContainerRegistryResponse, error)
	UpdateContainerRegistry(context.Context, *UpdateContainerRegistryRequest) (*UpdateContainerRegistryResponse, error)
	DeleteContainerRegistry(context.Context, *DeleteContainerRegistryRequest) (*DeleteContainerRegistryResponse, error)
	GetContainerRegistry(context.Context, *GetContainerRegistryRequest) (*GetContainerRegistryResponse, error)
	AddCloudProvider(context.Context, *AddCloudProviderRequest) (*AddCloudProviderResponse, error)
	UpdateCloudProvider(context.Context, *UpdateCloudProviderRequest) (*UpdateCloudProviderResponse, error)
	DeleteCloudProvider(context.Context, *DeleteCloudProviderRequest) (*DeleteCloudProviderResponse, error)
	GetCloudProviders(context.Context, *GetCloudProvidersRequest) (*GetCloudProvidersResponse, error)
	GetCloudProvidersWithFilter(context.Context, *GetCloudProvidersWithFilterRequest) (*GetCloudProvidersWithFilterResponse, error)
	RegisterArgoCDProject(context.Context, *RegisterArgoCDProjectRequest) (*RegisterArgoCDProjectResponse, error)
	GetArgoCDProjects(context.Context, *GetArgoCDProjectsRequest) (*GetArgoCDProjectsResponse, error)
	UnRegisterArgoCDProject(context.Context, *UnRegisterArgoCDProjectRequest) (*UnRegisterArgoCDProjectResponse, error)
	RegisterTektonProject(context.Context, *RegisterTektonProjectRequest) (*RegisterTektonProjectResponse, error)
	GetTektonProject(context.Context, *GetTektonProjectRequest) (*GetTektonProjectResponse, error)
	UnRegisterTektonProject(context.Context, *UnRegisterTektonProjectRequest) (*UnRegisterTektonProjectResponse, error)
	AddCrossplanProvider(context.Context, *AddCrossplanProviderRequest) (*AddCrossplanProviderResponse, error)
	DeleteCrossplanProvider(context.Context, *DeleteCrossplanProviderRequest) (*DeleteCrossplanProviderResponse, error)
	GetCrossplanProviders(context.Context, *GetCrossplanProvidersRequest) (*GetCrossplanProvidersResponse, error)
	UpdateCrossplanProvider(context.Context, *UpdateCrossplanProviderRequest) (*UpdateCrossplanProviderResponse, error)
	RegisterCrossplaneProject(context.Context, *RegisterCrossplaneProjectRequest) (*RegisterCrossplaneProjectResponse, error)
	GetCrossplaneProject(context.Context, *GetCrossplaneProjectsRequest) (*GetCrossplaneProjectsResponse, error)
	UnRegisterCrossplaneProject(context.Context, *UnRegisterCrossplaneProjectRequest) (*UnRegisterCrossplaneProjectResponse, error)
	GetManagedClusters(context.Context, *GetManagedClustersRequest) (*GetManagedClustersResponse, error)
	GetManagedClusterKubeconfig(context.Context, *GetManagedClusterKubeconfigRequest) (*GetManagedClusterKubeconfigResponse, error)
	mustEmbedUnimplementedCaptenPluginsServer()
}

// UnimplementedCaptenPluginsServer must be embedded to have forward compatible implementations.
type UnimplementedCaptenPluginsServer struct {
}

func (UnimplementedCaptenPluginsServer) GetCaptenPlugins(context.Context, *GetCaptenPluginsRequest) (*GetCaptenPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptenPlugins not implemented")
}
func (UnimplementedCaptenPluginsServer) AddGitProject(context.Context, *AddGitProjectRequest) (*AddGitProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitProject not implemented")
}
func (UnimplementedCaptenPluginsServer) UpdateGitProject(context.Context, *UpdateGitProjectRequest) (*UpdateGitProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitProject not implemented")
}
func (UnimplementedCaptenPluginsServer) DeleteGitProject(context.Context, *DeleteGitProjectRequest) (*DeleteGitProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitProject not implemented")
}
func (UnimplementedCaptenPluginsServer) GetGitProjects(context.Context, *GetGitProjectsRequest) (*GetGitProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitProjects not implemented")
}
func (UnimplementedCaptenPluginsServer) GetGitProjectsForLabels(context.Context, *GetGitProjectsForLabelsRequest) (*GetGitProjectsForLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitProjectsForLabels not implemented")
}
func (UnimplementedCaptenPluginsServer) GetTektonPipelines(context.Context, *GetTektonPipelinesRequest) (*GetTektonPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTektonPipelines not implemented")
}
func (UnimplementedCaptenPluginsServer) CreateTektonPipeline(context.Context, *CreateTektonPipelineRequest) (*CreateTektonPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTektonPipeline not implemented")
}
func (UnimplementedCaptenPluginsServer) UpdateTektonPipeline(context.Context, *UpdateTektonPipelineRequest) (*UpdateTektonPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTektonPipeline not implemented")
}
func (UnimplementedCaptenPluginsServer) DeleteTektonPipeline(context.Context, *DeleteTektonPipelineRequest) (*DeleteTektonPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTektonPipeline not implemented")
}
func (UnimplementedCaptenPluginsServer) AddContainerRegistry(context.Context, *AddContainerRegistryRequest) (*AddContainerRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContainerRegistry not implemented")
}
func (UnimplementedCaptenPluginsServer) UpdateContainerRegistry(context.Context, *UpdateContainerRegistryRequest) (*UpdateContainerRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContainerRegistry not implemented")
}
func (UnimplementedCaptenPluginsServer) DeleteContainerRegistry(context.Context, *DeleteContainerRegistryRequest) (*DeleteContainerRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainerRegistry not implemented")
}
func (UnimplementedCaptenPluginsServer) GetContainerRegistry(context.Context, *GetContainerRegistryRequest) (*GetContainerRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerRegistry not implemented")
}
func (UnimplementedCaptenPluginsServer) AddCloudProvider(context.Context, *AddCloudProviderRequest) (*AddCloudProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCloudProvider not implemented")
}
func (UnimplementedCaptenPluginsServer) UpdateCloudProvider(context.Context, *UpdateCloudProviderRequest) (*UpdateCloudProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudProvider not implemented")
}
func (UnimplementedCaptenPluginsServer) DeleteCloudProvider(context.Context, *DeleteCloudProviderRequest) (*DeleteCloudProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudProvider not implemented")
}
func (UnimplementedCaptenPluginsServer) GetCloudProviders(context.Context, *GetCloudProvidersRequest) (*GetCloudProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudProviders not implemented")
}
func (UnimplementedCaptenPluginsServer) GetCloudProvidersWithFilter(context.Context, *GetCloudProvidersWithFilterRequest) (*GetCloudProvidersWithFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudProvidersWithFilter not implemented")
}
func (UnimplementedCaptenPluginsServer) RegisterArgoCDProject(context.Context, *RegisterArgoCDProjectRequest) (*RegisterArgoCDProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterArgoCDProject not implemented")
}
func (UnimplementedCaptenPluginsServer) GetArgoCDProjects(context.Context, *GetArgoCDProjectsRequest) (*GetArgoCDProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArgoCDProjects not implemented")
}
func (UnimplementedCaptenPluginsServer) UnRegisterArgoCDProject(context.Context, *UnRegisterArgoCDProjectRequest) (*UnRegisterArgoCDProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterArgoCDProject not implemented")
}
func (UnimplementedCaptenPluginsServer) RegisterTektonProject(context.Context, *RegisterTektonProjectRequest) (*RegisterTektonProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTektonProject not implemented")
}
func (UnimplementedCaptenPluginsServer) GetTektonProject(context.Context, *GetTektonProjectRequest) (*GetTektonProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTektonProject not implemented")
}
func (UnimplementedCaptenPluginsServer) UnRegisterTektonProject(context.Context, *UnRegisterTektonProjectRequest) (*UnRegisterTektonProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterTektonProject not implemented")
}
func (UnimplementedCaptenPluginsServer) AddCrossplanProvider(context.Context, *AddCrossplanProviderRequest) (*AddCrossplanProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCrossplanProvider not implemented")
}
func (UnimplementedCaptenPluginsServer) DeleteCrossplanProvider(context.Context, *DeleteCrossplanProviderRequest) (*DeleteCrossplanProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrossplanProvider not implemented")
}
func (UnimplementedCaptenPluginsServer) GetCrossplanProviders(context.Context, *GetCrossplanProvidersRequest) (*GetCrossplanProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrossplanProviders not implemented")
}
func (UnimplementedCaptenPluginsServer) UpdateCrossplanProvider(context.Context, *UpdateCrossplanProviderRequest) (*UpdateCrossplanProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrossplanProvider not implemented")
}
func (UnimplementedCaptenPluginsServer) RegisterCrossplaneProject(context.Context, *RegisterCrossplaneProjectRequest) (*RegisterCrossplaneProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCrossplaneProject not implemented")
}
func (UnimplementedCaptenPluginsServer) GetCrossplaneProject(context.Context, *GetCrossplaneProjectsRequest) (*GetCrossplaneProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrossplaneProject not implemented")
}
func (UnimplementedCaptenPluginsServer) UnRegisterCrossplaneProject(context.Context, *UnRegisterCrossplaneProjectRequest) (*UnRegisterCrossplaneProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterCrossplaneProject not implemented")
}
func (UnimplementedCaptenPluginsServer) GetManagedClusters(context.Context, *GetManagedClustersRequest) (*GetManagedClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedClusters not implemented")
}
func (UnimplementedCaptenPluginsServer) GetManagedClusterKubeconfig(context.Context, *GetManagedClusterKubeconfigRequest) (*GetManagedClusterKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedClusterKubeconfig not implemented")
}
func (UnimplementedCaptenPluginsServer) mustEmbedUnimplementedCaptenPluginsServer() {}

// UnsafeCaptenPluginsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptenPluginsServer will
// result in compilation errors.
type UnsafeCaptenPluginsServer interface {
	mustEmbedUnimplementedCaptenPluginsServer()
}

func RegisterCaptenPluginsServer(s grpc.ServiceRegistrar, srv CaptenPluginsServer) {
	s.RegisterService(&CaptenPlugins_ServiceDesc, srv)
}

func _CaptenPlugins_GetCaptenPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaptenPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetCaptenPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetCaptenPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetCaptenPlugins(ctx, req.(*GetCaptenPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_AddGitProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).AddGitProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_AddGitProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).AddGitProject(ctx, req.(*AddGitProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UpdateGitProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UpdateGitProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UpdateGitProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UpdateGitProject(ctx, req.(*UpdateGitProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_DeleteGitProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).DeleteGitProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_DeleteGitProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).DeleteGitProject(ctx, req.(*DeleteGitProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetGitProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetGitProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetGitProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetGitProjects(ctx, req.(*GetGitProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetGitProjectsForLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitProjectsForLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetGitProjectsForLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetGitProjectsForLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetGitProjectsForLabels(ctx, req.(*GetGitProjectsForLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetTektonPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTektonPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetTektonPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetTektonPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetTektonPipelines(ctx, req.(*GetTektonPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_CreateTektonPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTektonPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).CreateTektonPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_CreateTektonPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).CreateTektonPipeline(ctx, req.(*CreateTektonPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UpdateTektonPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTektonPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UpdateTektonPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UpdateTektonPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UpdateTektonPipeline(ctx, req.(*UpdateTektonPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_DeleteTektonPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTektonPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).DeleteTektonPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_DeleteTektonPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).DeleteTektonPipeline(ctx, req.(*DeleteTektonPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_AddContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).AddContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_AddContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).AddContainerRegistry(ctx, req.(*AddContainerRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UpdateContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UpdateContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UpdateContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UpdateContainerRegistry(ctx, req.(*UpdateContainerRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_DeleteContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).DeleteContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_DeleteContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).DeleteContainerRegistry(ctx, req.(*DeleteContainerRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetContainerRegistry(ctx, req.(*GetContainerRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_AddCloudProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCloudProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).AddCloudProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_AddCloudProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).AddCloudProvider(ctx, req.(*AddCloudProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UpdateCloudProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UpdateCloudProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UpdateCloudProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UpdateCloudProvider(ctx, req.(*UpdateCloudProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_DeleteCloudProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).DeleteCloudProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_DeleteCloudProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).DeleteCloudProvider(ctx, req.(*DeleteCloudProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetCloudProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetCloudProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetCloudProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetCloudProviders(ctx, req.(*GetCloudProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetCloudProvidersWithFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudProvidersWithFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetCloudProvidersWithFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetCloudProvidersWithFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetCloudProvidersWithFilter(ctx, req.(*GetCloudProvidersWithFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_RegisterArgoCDProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterArgoCDProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).RegisterArgoCDProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_RegisterArgoCDProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).RegisterArgoCDProject(ctx, req.(*RegisterArgoCDProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetArgoCDProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArgoCDProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetArgoCDProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetArgoCDProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetArgoCDProjects(ctx, req.(*GetArgoCDProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UnRegisterArgoCDProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterArgoCDProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UnRegisterArgoCDProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UnRegisterArgoCDProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UnRegisterArgoCDProject(ctx, req.(*UnRegisterArgoCDProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_RegisterTektonProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTektonProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).RegisterTektonProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_RegisterTektonProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).RegisterTektonProject(ctx, req.(*RegisterTektonProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetTektonProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTektonProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetTektonProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetTektonProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetTektonProject(ctx, req.(*GetTektonProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UnRegisterTektonProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterTektonProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UnRegisterTektonProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UnRegisterTektonProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UnRegisterTektonProject(ctx, req.(*UnRegisterTektonProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_AddCrossplanProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCrossplanProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).AddCrossplanProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_AddCrossplanProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).AddCrossplanProvider(ctx, req.(*AddCrossplanProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_DeleteCrossplanProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrossplanProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).DeleteCrossplanProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_DeleteCrossplanProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).DeleteCrossplanProvider(ctx, req.(*DeleteCrossplanProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetCrossplanProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrossplanProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetCrossplanProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetCrossplanProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetCrossplanProviders(ctx, req.(*GetCrossplanProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UpdateCrossplanProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrossplanProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UpdateCrossplanProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UpdateCrossplanProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UpdateCrossplanProvider(ctx, req.(*UpdateCrossplanProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_RegisterCrossplaneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCrossplaneProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).RegisterCrossplaneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_RegisterCrossplaneProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).RegisterCrossplaneProject(ctx, req.(*RegisterCrossplaneProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetCrossplaneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrossplaneProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetCrossplaneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetCrossplaneProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetCrossplaneProject(ctx, req.(*GetCrossplaneProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_UnRegisterCrossplaneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterCrossplaneProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).UnRegisterCrossplaneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_UnRegisterCrossplaneProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).UnRegisterCrossplaneProject(ctx, req.(*UnRegisterCrossplaneProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetManagedClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetManagedClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetManagedClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetManagedClusters(ctx, req.(*GetManagedClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptenPlugins_GetManagedClusterKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedClusterKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptenPluginsServer).GetManagedClusterKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptenPlugins_GetManagedClusterKubeconfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptenPluginsServer).GetManagedClusterKubeconfig(ctx, req.(*GetManagedClusterKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptenPlugins_ServiceDesc is the grpc.ServiceDesc for CaptenPlugins service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptenPlugins_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "captenpluginspb.capten_plugins",
	HandlerType: (*CaptenPluginsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCaptenPlugins",
			Handler:    _CaptenPlugins_GetCaptenPlugins_Handler,
		},
		{
			MethodName: "AddGitProject",
			Handler:    _CaptenPlugins_AddGitProject_Handler,
		},
		{
			MethodName: "UpdateGitProject",
			Handler:    _CaptenPlugins_UpdateGitProject_Handler,
		},
		{
			MethodName: "DeleteGitProject",
			Handler:    _CaptenPlugins_DeleteGitProject_Handler,
		},
		{
			MethodName: "GetGitProjects",
			Handler:    _CaptenPlugins_GetGitProjects_Handler,
		},
		{
			MethodName: "GetGitProjectsForLabels",
			Handler:    _CaptenPlugins_GetGitProjectsForLabels_Handler,
		},
		{
			MethodName: "GetTektonPipelines",
			Handler:    _CaptenPlugins_GetTektonPipelines_Handler,
		},
		{
			MethodName: "CreateTektonPipeline",
			Handler:    _CaptenPlugins_CreateTektonPipeline_Handler,
		},
		{
			MethodName: "UpdateTektonPipeline",
			Handler:    _CaptenPlugins_UpdateTektonPipeline_Handler,
		},
		{
			MethodName: "DeleteTektonPipeline",
			Handler:    _CaptenPlugins_DeleteTektonPipeline_Handler,
		},
		{
			MethodName: "AddContainerRegistry",
			Handler:    _CaptenPlugins_AddContainerRegistry_Handler,
		},
		{
			MethodName: "UpdateContainerRegistry",
			Handler:    _CaptenPlugins_UpdateContainerRegistry_Handler,
		},
		{
			MethodName: "DeleteContainerRegistry",
			Handler:    _CaptenPlugins_DeleteContainerRegistry_Handler,
		},
		{
			MethodName: "GetContainerRegistry",
			Handler:    _CaptenPlugins_GetContainerRegistry_Handler,
		},
		{
			MethodName: "AddCloudProvider",
			Handler:    _CaptenPlugins_AddCloudProvider_Handler,
		},
		{
			MethodName: "UpdateCloudProvider",
			Handler:    _CaptenPlugins_UpdateCloudProvider_Handler,
		},
		{
			MethodName: "DeleteCloudProvider",
			Handler:    _CaptenPlugins_DeleteCloudProvider_Handler,
		},
		{
			MethodName: "GetCloudProviders",
			Handler:    _CaptenPlugins_GetCloudProviders_Handler,
		},
		{
			MethodName: "GetCloudProvidersWithFilter",
			Handler:    _CaptenPlugins_GetCloudProvidersWithFilter_Handler,
		},
		{
			MethodName: "RegisterArgoCDProject",
			Handler:    _CaptenPlugins_RegisterArgoCDProject_Handler,
		},
		{
			MethodName: "GetArgoCDProjects",
			Handler:    _CaptenPlugins_GetArgoCDProjects_Handler,
		},
		{
			MethodName: "UnRegisterArgoCDProject",
			Handler:    _CaptenPlugins_UnRegisterArgoCDProject_Handler,
		},
		{
			MethodName: "RegisterTektonProject",
			Handler:    _CaptenPlugins_RegisterTektonProject_Handler,
		},
		{
			MethodName: "GetTektonProject",
			Handler:    _CaptenPlugins_GetTektonProject_Handler,
		},
		{
			MethodName: "UnRegisterTektonProject",
			Handler:    _CaptenPlugins_UnRegisterTektonProject_Handler,
		},
		{
			MethodName: "AddCrossplanProvider",
			Handler:    _CaptenPlugins_AddCrossplanProvider_Handler,
		},
		{
			MethodName: "DeleteCrossplanProvider",
			Handler:    _CaptenPlugins_DeleteCrossplanProvider_Handler,
		},
		{
			MethodName: "GetCrossplanProviders",
			Handler:    _CaptenPlugins_GetCrossplanProviders_Handler,
		},
		{
			MethodName: "UpdateCrossplanProvider",
			Handler:    _CaptenPlugins_UpdateCrossplanProvider_Handler,
		},
		{
			MethodName: "RegisterCrossplaneProject",
			Handler:    _CaptenPlugins_RegisterCrossplaneProject_Handler,
		},
		{
			MethodName: "GetCrossplaneProject",
			Handler:    _CaptenPlugins_GetCrossplaneProject_Handler,
		},
		{
			MethodName: "UnRegisterCrossplaneProject",
			Handler:    _CaptenPlugins_UnRegisterCrossplaneProject_Handler,
		},
		{
			MethodName: "GetManagedClusters",
			Handler:    _CaptenPlugins_GetManagedClusters_Handler,
		},
		{
			MethodName: "GetManagedClusterKubeconfig",
			Handler:    _CaptenPlugins_GetManagedClusterKubeconfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "capten_plugins.proto",
}
