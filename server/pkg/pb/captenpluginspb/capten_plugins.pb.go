// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: capten_plugins.proto

package captenpluginspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusCode int32

const (
	StatusCode_OK               StatusCode = 0
	StatusCode_INTERNAL_ERROR   StatusCode = 1
	StatusCode_INVALID_ARGUMENT StatusCode = 2
	StatusCode_NOT_FOUND        StatusCode = 3
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "OK",
		1: "INTERNAL_ERROR",
		2: "INVALID_ARGUMENT",
		3: "NOT_FOUND",
	}
	StatusCode_value = map[string]int32{
		"OK":               0,
		"INTERNAL_ERROR":   1,
		"INVALID_ARGUMENT": 2,
		"NOT_FOUND":        3,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_capten_plugins_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_capten_plugins_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{0}
}

type UpdateCrossplanProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudType       string `protobuf:"bytes,2,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
	ProviderName    string `protobuf:"bytes,3,opt,name=providerName,proto3" json:"providerName,omitempty"`
	CloudProviderId string `protobuf:"bytes,4,opt,name=cloudProviderId,proto3" json:"cloudProviderId,omitempty"`
}

func (x *UpdateCrossplanProviderRequest) Reset() {
	*x = UpdateCrossplanProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCrossplanProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCrossplanProviderRequest) ProtoMessage() {}

func (x *UpdateCrossplanProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCrossplanProviderRequest.ProtoReflect.Descriptor instead.
func (*UpdateCrossplanProviderRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateCrossplanProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCrossplanProviderRequest) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *UpdateCrossplanProviderRequest) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *UpdateCrossplanProviderRequest) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

type UpdateCrossplanProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *UpdateCrossplanProviderResponse) Reset() {
	*x = UpdateCrossplanProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCrossplanProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCrossplanProviderResponse) ProtoMessage() {}

func (x *UpdateCrossplanProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCrossplanProviderResponse.ProtoReflect.Descriptor instead.
func (*UpdateCrossplanProviderResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCrossplanProviderResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *UpdateCrossplanProviderResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type DeleteCrossplanProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCrossplanProviderRequest) Reset() {
	*x = DeleteCrossplanProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrossplanProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrossplanProviderRequest) ProtoMessage() {}

func (x *DeleteCrossplanProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrossplanProviderRequest.ProtoReflect.Descriptor instead.
func (*DeleteCrossplanProviderRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCrossplanProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCrossplanProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *DeleteCrossplanProviderResponse) Reset() {
	*x = DeleteCrossplanProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrossplanProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrossplanProviderResponse) ProtoMessage() {}

func (x *DeleteCrossplanProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrossplanProviderResponse.ProtoReflect.Descriptor instead.
func (*DeleteCrossplanProviderResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteCrossplanProviderResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *DeleteCrossplanProviderResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetCrossplanProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCrossplanProvidersRequest) Reset() {
	*x = GetCrossplanProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossplanProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossplanProvidersRequest) ProtoMessage() {}

func (x *GetCrossplanProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossplanProvidersRequest.ProtoReflect.Descriptor instead.
func (*GetCrossplanProvidersRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{4}
}

type GetCrossplanProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers     []*CrossplaneProvider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	Status        StatusCode            `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string                `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *GetCrossplanProvidersResponse) Reset() {
	*x = GetCrossplanProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossplanProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossplanProvidersResponse) ProtoMessage() {}

func (x *GetCrossplanProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossplanProvidersResponse.ProtoReflect.Descriptor instead.
func (*GetCrossplanProvidersResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{5}
}

func (x *GetCrossplanProvidersResponse) GetProviders() []*CrossplaneProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *GetCrossplanProvidersResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetCrossplanProvidersResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type CrossplaneProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudType       string `protobuf:"bytes,2,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
	ProviderName    string `protobuf:"bytes,3,opt,name=providerName,proto3" json:"providerName,omitempty"`
	CloudProviderId string `protobuf:"bytes,4,opt,name=cloudProviderId,proto3" json:"cloudProviderId,omitempty"`
	Status          string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CrossplaneProvider) Reset() {
	*x = CrossplaneProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossplaneProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossplaneProvider) ProtoMessage() {}

func (x *CrossplaneProvider) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossplaneProvider.ProtoReflect.Descriptor instead.
func (*CrossplaneProvider) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{6}
}

func (x *CrossplaneProvider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CrossplaneProvider) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *CrossplaneProvider) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *CrossplaneProvider) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

func (x *CrossplaneProvider) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AddCrossplanProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudType       string `protobuf:"bytes,1,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
	ProviderName    string `protobuf:"bytes,2,opt,name=providerName,proto3" json:"providerName,omitempty"`
	CloudProviderId string `protobuf:"bytes,3,opt,name=cloudProviderId,proto3" json:"cloudProviderId,omitempty"`
}

func (x *AddCrossplanProviderRequest) Reset() {
	*x = AddCrossplanProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCrossplanProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCrossplanProviderRequest) ProtoMessage() {}

func (x *AddCrossplanProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCrossplanProviderRequest.ProtoReflect.Descriptor instead.
func (*AddCrossplanProviderRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{7}
}

func (x *AddCrossplanProviderRequest) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *AddCrossplanProviderRequest) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *AddCrossplanProviderRequest) GetCloudProviderId() string {
	if x != nil {
		return x.CloudProviderId
	}
	return ""
}

type AddCrossplanProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *AddCrossplanProviderResponse) Reset() {
	*x = AddCrossplanProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCrossplanProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCrossplanProviderResponse) ProtoMessage() {}

func (x *AddCrossplanProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCrossplanProviderResponse.ProtoReflect.Descriptor instead.
func (*AddCrossplanProviderResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{8}
}

func (x *AddCrossplanProviderResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddCrossplanProviderResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *AddCrossplanProviderResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type AddGitProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectUrl  string   `protobuf:"bytes,1,opt,name=projectUrl,proto3" json:"projectUrl,omitempty"`
	Labels      []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	AccessToken string   `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
}

func (x *AddGitProjectRequest) Reset() {
	*x = AddGitProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGitProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGitProjectRequest) ProtoMessage() {}

func (x *AddGitProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGitProjectRequest.ProtoReflect.Descriptor instead.
func (*AddGitProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{9}
}

func (x *AddGitProjectRequest) GetProjectUrl() string {
	if x != nil {
		return x.ProjectUrl
	}
	return ""
}

func (x *AddGitProjectRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AddGitProjectRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type AddGitProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *AddGitProjectResponse) Reset() {
	*x = AddGitProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGitProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGitProjectResponse) ProtoMessage() {}

func (x *AddGitProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGitProjectResponse.ProtoReflect.Descriptor instead.
func (*AddGitProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{10}
}

func (x *AddGitProjectResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddGitProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *AddGitProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type UpdateGitProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectUrl  string   `protobuf:"bytes,2,opt,name=projectUrl,proto3" json:"projectUrl,omitempty"`
	Labels      []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	AccessToken string   `protobuf:"bytes,4,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
}

func (x *UpdateGitProjectRequest) Reset() {
	*x = UpdateGitProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGitProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGitProjectRequest) ProtoMessage() {}

func (x *UpdateGitProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGitProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateGitProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateGitProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateGitProjectRequest) GetProjectUrl() string {
	if x != nil {
		return x.ProjectUrl
	}
	return ""
}

func (x *UpdateGitProjectRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateGitProjectRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type UpdateGitProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *UpdateGitProjectResponse) Reset() {
	*x = UpdateGitProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGitProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGitProjectResponse) ProtoMessage() {}

func (x *UpdateGitProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGitProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateGitProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateGitProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *UpdateGitProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type DeleteGitProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGitProjectRequest) Reset() {
	*x = DeleteGitProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitProjectRequest) ProtoMessage() {}

func (x *DeleteGitProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteGitProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteGitProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteGitProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *DeleteGitProjectResponse) Reset() {
	*x = DeleteGitProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitProjectResponse) ProtoMessage() {}

func (x *DeleteGitProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteGitProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteGitProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *DeleteGitProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetGitProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGitProjectsRequest) Reset() {
	*x = GetGitProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitProjectsRequest) ProtoMessage() {}

func (x *GetGitProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetGitProjectsRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{15}
}

type GitProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectUrl     string   `protobuf:"bytes,2,opt,name=projectUrl,proto3" json:"projectUrl,omitempty"`
	Labels         []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	LastUpdateTime string   `protobuf:"bytes,4,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	AccessToken    string   `protobuf:"bytes,5,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
}

func (x *GitProject) Reset() {
	*x = GitProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProject) ProtoMessage() {}

func (x *GitProject) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProject.ProtoReflect.Descriptor instead.
func (*GitProject) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{16}
}

func (x *GitProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GitProject) GetProjectUrl() string {
	if x != nil {
		return x.ProjectUrl
	}
	return ""
}

func (x *GitProject) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GitProject) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

func (x *GitProject) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type GetGitProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects      []*GitProject `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	Status        StatusCode    `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string        `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *GetGitProjectsResponse) Reset() {
	*x = GetGitProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitProjectsResponse) ProtoMessage() {}

func (x *GetGitProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetGitProjectsResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{17}
}

func (x *GetGitProjectsResponse) GetProjects() []*GitProject {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *GetGitProjectsResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetGitProjectsResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetGitProjectsForLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GetGitProjectsForLabelsRequest) Reset() {
	*x = GetGitProjectsForLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitProjectsForLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitProjectsForLabelsRequest) ProtoMessage() {}

func (x *GetGitProjectsForLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitProjectsForLabelsRequest.ProtoReflect.Descriptor instead.
func (*GetGitProjectsForLabelsRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{18}
}

func (x *GetGitProjectsForLabelsRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetGitProjectsForLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects      []*GitProject `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	Status        StatusCode    `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string        `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *GetGitProjectsForLabelsResponse) Reset() {
	*x = GetGitProjectsForLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitProjectsForLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitProjectsForLabelsResponse) ProtoMessage() {}

func (x *GetGitProjectsForLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitProjectsForLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetGitProjectsForLabelsResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{19}
}

func (x *GetGitProjectsForLabelsResponse) GetProjects() []*GitProject {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *GetGitProjectsForLabelsResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetGitProjectsForLabelsResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type AddCloudProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudType       string            `protobuf:"bytes,1,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
	Labels          []string          `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	CloudAttributes map[string]string `protobuf:"bytes,3,rep,name=cloudAttributes,proto3" json:"cloudAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddCloudProviderRequest) Reset() {
	*x = AddCloudProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCloudProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCloudProviderRequest) ProtoMessage() {}

func (x *AddCloudProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCloudProviderRequest.ProtoReflect.Descriptor instead.
func (*AddCloudProviderRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{20}
}

func (x *AddCloudProviderRequest) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *AddCloudProviderRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AddCloudProviderRequest) GetCloudAttributes() map[string]string {
	if x != nil {
		return x.CloudAttributes
	}
	return nil
}

type AddCloudProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *AddCloudProviderResponse) Reset() {
	*x = AddCloudProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCloudProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCloudProviderResponse) ProtoMessage() {}

func (x *AddCloudProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCloudProviderResponse.ProtoReflect.Descriptor instead.
func (*AddCloudProviderResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{21}
}

func (x *AddCloudProviderResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddCloudProviderResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *AddCloudProviderResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type UpdateCloudProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudType       string            `protobuf:"bytes,2,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
	Labels          []string          `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	CloudAttributes map[string]string `protobuf:"bytes,4,rep,name=cloudAttributes,proto3" json:"cloudAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateCloudProviderRequest) Reset() {
	*x = UpdateCloudProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudProviderRequest) ProtoMessage() {}

func (x *UpdateCloudProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudProviderRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudProviderRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateCloudProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCloudProviderRequest) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *UpdateCloudProviderRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateCloudProviderRequest) GetCloudAttributes() map[string]string {
	if x != nil {
		return x.CloudAttributes
	}
	return nil
}

type UpdateCloudProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *UpdateCloudProviderResponse) Reset() {
	*x = UpdateCloudProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudProviderResponse) ProtoMessage() {}

func (x *UpdateCloudProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudProviderResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudProviderResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateCloudProviderResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *UpdateCloudProviderResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type DeleteCloudProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCloudProviderRequest) Reset() {
	*x = DeleteCloudProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudProviderRequest) ProtoMessage() {}

func (x *DeleteCloudProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudProviderRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudProviderRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteCloudProviderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCloudProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *DeleteCloudProviderResponse) Reset() {
	*x = DeleteCloudProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudProviderResponse) ProtoMessage() {}

func (x *DeleteCloudProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudProviderResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudProviderResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteCloudProviderResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *DeleteCloudProviderResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetCloudProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCloudProvidersRequest) Reset() {
	*x = GetCloudProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudProvidersRequest) ProtoMessage() {}

func (x *GetCloudProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudProvidersRequest.ProtoReflect.Descriptor instead.
func (*GetCloudProvidersRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{26}
}

type CloudProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudType       string            `protobuf:"bytes,2,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
	Labels          []string          `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	LastUpdateTime  string            `protobuf:"bytes,4,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	CloudAttributes map[string]string `protobuf:"bytes,5,rep,name=cloudAttributes,proto3" json:"cloudAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudProvider) Reset() {
	*x = CloudProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudProvider) ProtoMessage() {}

func (x *CloudProvider) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudProvider.ProtoReflect.Descriptor instead.
func (*CloudProvider) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{27}
}

func (x *CloudProvider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudProvider) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

func (x *CloudProvider) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CloudProvider) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

func (x *CloudProvider) GetCloudAttributes() map[string]string {
	if x != nil {
		return x.CloudAttributes
	}
	return nil
}

type GetCloudProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudProviders []*CloudProvider `protobuf:"bytes,1,rep,name=cloudProviders,proto3" json:"cloudProviders,omitempty"`
	Status         StatusCode       `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage  string           `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *GetCloudProvidersResponse) Reset() {
	*x = GetCloudProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudProvidersResponse) ProtoMessage() {}

func (x *GetCloudProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudProvidersResponse.ProtoReflect.Descriptor instead.
func (*GetCloudProvidersResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{28}
}

func (x *GetCloudProvidersResponse) GetCloudProviders() []*CloudProvider {
	if x != nil {
		return x.CloudProviders
	}
	return nil
}

func (x *GetCloudProvidersResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetCloudProvidersResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetCloudProvidersWithFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels    []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	CloudType string   `protobuf:"bytes,2,opt,name=cloudType,proto3" json:"cloudType,omitempty"`
}

func (x *GetCloudProvidersWithFilterRequest) Reset() {
	*x = GetCloudProvidersWithFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudProvidersWithFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudProvidersWithFilterRequest) ProtoMessage() {}

func (x *GetCloudProvidersWithFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudProvidersWithFilterRequest.ProtoReflect.Descriptor instead.
func (*GetCloudProvidersWithFilterRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{29}
}

func (x *GetCloudProvidersWithFilterRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetCloudProvidersWithFilterRequest) GetCloudType() string {
	if x != nil {
		return x.CloudType
	}
	return ""
}

type GetCloudProvidersWithFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudProviders []*CloudProvider `protobuf:"bytes,1,rep,name=cloudProviders,proto3" json:"cloudProviders,omitempty"`
	Status         StatusCode       `protobuf:"varint,2,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage  string           `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *GetCloudProvidersWithFilterResponse) Reset() {
	*x = GetCloudProvidersWithFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudProvidersWithFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudProvidersWithFilterResponse) ProtoMessage() {}

func (x *GetCloudProvidersWithFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudProvidersWithFilterResponse.ProtoReflect.Descriptor instead.
func (*GetCloudProvidersWithFilterResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{30}
}

func (x *GetCloudProvidersWithFilterResponse) GetCloudProviders() []*CloudProvider {
	if x != nil {
		return x.CloudProviders
	}
	return nil
}

func (x *GetCloudProvidersWithFilterResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetCloudProvidersWithFilterResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type RegisterArgoCDProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterArgoCDProjectRequest) Reset() {
	*x = RegisterArgoCDProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArgoCDProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArgoCDProjectRequest) ProtoMessage() {}

func (x *RegisterArgoCDProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArgoCDProjectRequest.ProtoReflect.Descriptor instead.
func (*RegisterArgoCDProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{31}
}

func (x *RegisterArgoCDProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegisterArgoCDProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *RegisterArgoCDProjectResponse) Reset() {
	*x = RegisterArgoCDProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArgoCDProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArgoCDProjectResponse) ProtoMessage() {}

func (x *RegisterArgoCDProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArgoCDProjectResponse.ProtoReflect.Descriptor instead.
func (*RegisterArgoCDProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{32}
}

func (x *RegisterArgoCDProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *RegisterArgoCDProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type GetArgoCDProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetArgoCDProjectsRequest) Reset() {
	*x = GetArgoCDProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArgoCDProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArgoCDProjectsRequest) ProtoMessage() {}

func (x *GetArgoCDProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArgoCDProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetArgoCDProjectsRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{33}
}

type GetArgoCDProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode       `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string           `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Projects      []*ArgoCDProject `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *GetArgoCDProjectsResponse) Reset() {
	*x = GetArgoCDProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArgoCDProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArgoCDProjectsResponse) ProtoMessage() {}

func (x *GetArgoCDProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArgoCDProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetArgoCDProjectsResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{34}
}

func (x *GetArgoCDProjectsResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetArgoCDProjectsResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *GetArgoCDProjectsResponse) GetProjects() []*ArgoCDProject {
	if x != nil {
		return x.Projects
	}
	return nil
}

type UnRegisterArgoCDProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnRegisterArgoCDProjectRequest) Reset() {
	*x = UnRegisterArgoCDProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterArgoCDProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterArgoCDProjectRequest) ProtoMessage() {}

func (x *UnRegisterArgoCDProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterArgoCDProjectRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterArgoCDProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{35}
}

func (x *UnRegisterArgoCDProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnRegisterArgoCDProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *UnRegisterArgoCDProjectResponse) Reset() {
	*x = UnRegisterArgoCDProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterArgoCDProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterArgoCDProjectResponse) ProtoMessage() {}

func (x *UnRegisterArgoCDProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterArgoCDProjectResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterArgoCDProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{36}
}

func (x *UnRegisterArgoCDProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *UnRegisterArgoCDProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type ArgoCDProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectUrl     string `protobuf:"bytes,2,opt,name=projectUrl,proto3" json:"projectUrl,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdateTime string `protobuf:"bytes,4,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
}

func (x *ArgoCDProject) Reset() {
	*x = ArgoCDProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDProject) ProtoMessage() {}

func (x *ArgoCDProject) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDProject.ProtoReflect.Descriptor instead.
func (*ArgoCDProject) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{37}
}

func (x *ArgoCDProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ArgoCDProject) GetProjectUrl() string {
	if x != nil {
		return x.ProjectUrl
	}
	return ""
}

func (x *ArgoCDProject) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ArgoCDProject) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

type RegisterTektonProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterTektonProjectRequest) Reset() {
	*x = RegisterTektonProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTektonProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTektonProjectRequest) ProtoMessage() {}

func (x *RegisterTektonProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTektonProjectRequest.ProtoReflect.Descriptor instead.
func (*RegisterTektonProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{38}
}

func (x *RegisterTektonProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegisterTektonProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *RegisterTektonProjectResponse) Reset() {
	*x = RegisterTektonProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTektonProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTektonProjectResponse) ProtoMessage() {}

func (x *RegisterTektonProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTektonProjectResponse.ProtoReflect.Descriptor instead.
func (*RegisterTektonProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{39}
}

func (x *RegisterTektonProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *RegisterTektonProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type UnRegisterTektonProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnRegisterTektonProjectRequest) Reset() {
	*x = UnRegisterTektonProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterTektonProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterTektonProjectRequest) ProtoMessage() {}

func (x *UnRegisterTektonProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterTektonProjectRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterTektonProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{40}
}

func (x *UnRegisterTektonProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnRegisterTektonProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *UnRegisterTektonProjectResponse) Reset() {
	*x = UnRegisterTektonProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterTektonProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterTektonProjectResponse) ProtoMessage() {}

func (x *UnRegisterTektonProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterTektonProjectResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterTektonProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{41}
}

func (x *UnRegisterTektonProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *UnRegisterTektonProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type TektonProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GitProjectUrl  string `protobuf:"bytes,2,opt,name=gitProjectUrl,proto3" json:"gitProjectUrl,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdateTime string `protobuf:"bytes,4,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
}

func (x *TektonProject) Reset() {
	*x = TektonProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TektonProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TektonProject) ProtoMessage() {}

func (x *TektonProject) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TektonProject.ProtoReflect.Descriptor instead.
func (*TektonProject) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{42}
}

func (x *TektonProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TektonProject) GetGitProjectUrl() string {
	if x != nil {
		return x.GitProjectUrl
	}
	return ""
}

func (x *TektonProject) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TektonProject) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

type GetTektonProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTektonProjectsRequest) Reset() {
	*x = GetTektonProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTektonProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTektonProjectsRequest) ProtoMessage() {}

func (x *GetTektonProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTektonProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetTektonProjectsRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{43}
}

type GetTektonProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode       `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string           `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Projects      []*TektonProject `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *GetTektonProjectsResponse) Reset() {
	*x = GetTektonProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTektonProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTektonProjectsResponse) ProtoMessage() {}

func (x *GetTektonProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTektonProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetTektonProjectsResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{44}
}

func (x *GetTektonProjectsResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetTektonProjectsResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *GetTektonProjectsResponse) GetProjects() []*TektonProject {
	if x != nil {
		return x.Projects
	}
	return nil
}

type CaptenPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginName        string `protobuf:"bytes,1,opt,name=pluginName,proto3" json:"pluginName,omitempty"`
	PluginDescription string `protobuf:"bytes,2,opt,name=pluginDescription,proto3" json:"pluginDescription,omitempty"`
	LaunchURL         string `protobuf:"bytes,3,opt,name=launchURL,proto3" json:"launchURL,omitempty"`
	LaunchIcon        []byte `protobuf:"bytes,4,opt,name=launchIcon,proto3" json:"launchIcon,omitempty"`
	InstallStatus     string `protobuf:"bytes,5,opt,name=installStatus,proto3" json:"installStatus,omitempty"`
	RuntimeStatus     string `protobuf:"bytes,6,opt,name=runtimeStatus,proto3" json:"runtimeStatus,omitempty"`
}

func (x *CaptenPlugin) Reset() {
	*x = CaptenPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptenPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptenPlugin) ProtoMessage() {}

func (x *CaptenPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptenPlugin.ProtoReflect.Descriptor instead.
func (*CaptenPlugin) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{45}
}

func (x *CaptenPlugin) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *CaptenPlugin) GetPluginDescription() string {
	if x != nil {
		return x.PluginDescription
	}
	return ""
}

func (x *CaptenPlugin) GetLaunchURL() string {
	if x != nil {
		return x.LaunchURL
	}
	return ""
}

func (x *CaptenPlugin) GetLaunchIcon() []byte {
	if x != nil {
		return x.LaunchIcon
	}
	return nil
}

func (x *CaptenPlugin) GetInstallStatus() string {
	if x != nil {
		return x.InstallStatus
	}
	return ""
}

func (x *CaptenPlugin) GetRuntimeStatus() string {
	if x != nil {
		return x.RuntimeStatus
	}
	return ""
}

type GetCaptenPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCaptenPluginsRequest) Reset() {
	*x = GetCaptenPluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCaptenPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCaptenPluginsRequest) ProtoMessage() {}

func (x *GetCaptenPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCaptenPluginsRequest.ProtoReflect.Descriptor instead.
func (*GetCaptenPluginsRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{46}
}

type GetCaptenPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode      `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string          `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Plugins       []*CaptenPlugin `protobuf:"bytes,3,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *GetCaptenPluginsResponse) Reset() {
	*x = GetCaptenPluginsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCaptenPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCaptenPluginsResponse) ProtoMessage() {}

func (x *GetCaptenPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCaptenPluginsResponse.ProtoReflect.Descriptor instead.
func (*GetCaptenPluginsResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{47}
}

func (x *GetCaptenPluginsResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetCaptenPluginsResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *GetCaptenPluginsResponse) GetPlugins() []*CaptenPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type RegisterCrossplaneProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterCrossplaneProjectRequest) Reset() {
	*x = RegisterCrossplaneProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCrossplaneProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCrossplaneProjectRequest) ProtoMessage() {}

func (x *RegisterCrossplaneProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCrossplaneProjectRequest.ProtoReflect.Descriptor instead.
func (*RegisterCrossplaneProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{48}
}

func (x *RegisterCrossplaneProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegisterCrossplaneProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *RegisterCrossplaneProjectResponse) Reset() {
	*x = RegisterCrossplaneProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCrossplaneProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCrossplaneProjectResponse) ProtoMessage() {}

func (x *RegisterCrossplaneProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCrossplaneProjectResponse.ProtoReflect.Descriptor instead.
func (*RegisterCrossplaneProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{49}
}

func (x *RegisterCrossplaneProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *RegisterCrossplaneProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type UnRegisterCrossplaneProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnRegisterCrossplaneProjectRequest) Reset() {
	*x = UnRegisterCrossplaneProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterCrossplaneProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterCrossplaneProjectRequest) ProtoMessage() {}

func (x *UnRegisterCrossplaneProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterCrossplaneProjectRequest.ProtoReflect.Descriptor instead.
func (*UnRegisterCrossplaneProjectRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{50}
}

func (x *UnRegisterCrossplaneProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnRegisterCrossplaneProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
}

func (x *UnRegisterCrossplaneProjectResponse) Reset() {
	*x = UnRegisterCrossplaneProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnRegisterCrossplaneProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnRegisterCrossplaneProjectResponse) ProtoMessage() {}

func (x *UnRegisterCrossplaneProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnRegisterCrossplaneProjectResponse.ProtoReflect.Descriptor instead.
func (*UnRegisterCrossplaneProjectResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{51}
}

func (x *UnRegisterCrossplaneProjectResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *UnRegisterCrossplaneProjectResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type CrossplaneProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GitProjectUrl  string `protobuf:"bytes,2,opt,name=gitProjectUrl,proto3" json:"gitProjectUrl,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdateTime string `protobuf:"bytes,4,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
}

func (x *CrossplaneProject) Reset() {
	*x = CrossplaneProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossplaneProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossplaneProject) ProtoMessage() {}

func (x *CrossplaneProject) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossplaneProject.ProtoReflect.Descriptor instead.
func (*CrossplaneProject) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{52}
}

func (x *CrossplaneProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CrossplaneProject) GetGitProjectUrl() string {
	if x != nil {
		return x.GitProjectUrl
	}
	return ""
}

func (x *CrossplaneProject) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CrossplaneProject) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

type GetCrossplaneProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCrossplaneProjectsRequest) Reset() {
	*x = GetCrossplaneProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossplaneProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossplaneProjectsRequest) ProtoMessage() {}

func (x *GetCrossplaneProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossplaneProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetCrossplaneProjectsRequest) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{53}
}

type GetCrossplaneProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        StatusCode         `protobuf:"varint,1,opt,name=status,proto3,enum=captenpluginspb.StatusCode" json:"status,omitempty"`
	StatusMessage string             `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Project       *CrossplaneProject `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetCrossplaneProjectsResponse) Reset() {
	*x = GetCrossplaneProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capten_plugins_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossplaneProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossplaneProjectsResponse) ProtoMessage() {}

func (x *GetCrossplaneProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_capten_plugins_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossplaneProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetCrossplaneProjectsResponse) Descriptor() ([]byte, []int) {
	return file_capten_plugins_proto_rawDescGZIP(), []int{54}
}

func (x *GetCrossplaneProjectsResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetCrossplaneProjectsResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *GetCrossplaneProjectsResponse) GetProject() *CrossplaneProject {
	if x != nil {
		return x.Project
	}
	return nil
}

var File_capten_plugins_proto protoreflect.FileDescriptor

var file_capten_plugins_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x89, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1c,
	0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63,
	0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x47, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x41, 0x64,
	0x64, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61,
	0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0xb5, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x92, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61,
	0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x61,
	0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x61,
	0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61,
	0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a,
	0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a,
	0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x1e, 0x55, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1f,
	0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x1d, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63,
	0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x55, 0x6e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1f, 0x55, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63,
	0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e,
	0x43, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x21, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x22, 0x55, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x23, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1e,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb8,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2a, 0x4d, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x32, 0xb4, 0x16, 0x0a, 0x0e, 0x63, 0x61, 0x70,
	0x74, 0x65, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x28, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x74, 0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x47, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62,
	0x2e, 0x41, 0x64, 0x64, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x63,
	0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x26, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65,
	0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x61,
	0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x78, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67,
	0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x61, 0x70,
	0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61,
	0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x17, 0x55, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x15, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b,
	0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65,
	0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7e, 0x0a, 0x17, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x2e, 0x63,
	0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e,
	0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6b, 0x74, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x63, 0x61, 0x70, 0x74,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x2d, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x2e,
	0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x31, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x2d, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x33, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x12, 0x5a, 0x10, 0x2f, 0x63, 0x61, 0x70, 0x74, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_capten_plugins_proto_rawDescOnce sync.Once
	file_capten_plugins_proto_rawDescData = file_capten_plugins_proto_rawDesc
)

func file_capten_plugins_proto_rawDescGZIP() []byte {
	file_capten_plugins_proto_rawDescOnce.Do(func() {
		file_capten_plugins_proto_rawDescData = protoimpl.X.CompressGZIP(file_capten_plugins_proto_rawDescData)
	})
	return file_capten_plugins_proto_rawDescData
}

var file_capten_plugins_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_capten_plugins_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_capten_plugins_proto_goTypes = []interface{}{
	(StatusCode)(0),                             // 0: captenpluginspb.StatusCode
	(*UpdateCrossplanProviderRequest)(nil),      // 1: captenpluginspb.UpdateCrossplanProviderRequest
	(*UpdateCrossplanProviderResponse)(nil),     // 2: captenpluginspb.UpdateCrossplanProviderResponse
	(*DeleteCrossplanProviderRequest)(nil),      // 3: captenpluginspb.DeleteCrossplanProviderRequest
	(*DeleteCrossplanProviderResponse)(nil),     // 4: captenpluginspb.DeleteCrossplanProviderResponse
	(*GetCrossplanProvidersRequest)(nil),        // 5: captenpluginspb.GetCrossplanProvidersRequest
	(*GetCrossplanProvidersResponse)(nil),       // 6: captenpluginspb.GetCrossplanProvidersResponse
	(*CrossplaneProvider)(nil),                  // 7: captenpluginspb.CrossplaneProvider
	(*AddCrossplanProviderRequest)(nil),         // 8: captenpluginspb.AddCrossplanProviderRequest
	(*AddCrossplanProviderResponse)(nil),        // 9: captenpluginspb.AddCrossplanProviderResponse
	(*AddGitProjectRequest)(nil),                // 10: captenpluginspb.AddGitProjectRequest
	(*AddGitProjectResponse)(nil),               // 11: captenpluginspb.AddGitProjectResponse
	(*UpdateGitProjectRequest)(nil),             // 12: captenpluginspb.UpdateGitProjectRequest
	(*UpdateGitProjectResponse)(nil),            // 13: captenpluginspb.UpdateGitProjectResponse
	(*DeleteGitProjectRequest)(nil),             // 14: captenpluginspb.DeleteGitProjectRequest
	(*DeleteGitProjectResponse)(nil),            // 15: captenpluginspb.DeleteGitProjectResponse
	(*GetGitProjectsRequest)(nil),               // 16: captenpluginspb.GetGitProjectsRequest
	(*GitProject)(nil),                          // 17: captenpluginspb.GitProject
	(*GetGitProjectsResponse)(nil),              // 18: captenpluginspb.GetGitProjectsResponse
	(*GetGitProjectsForLabelsRequest)(nil),      // 19: captenpluginspb.GetGitProjectsForLabelsRequest
	(*GetGitProjectsForLabelsResponse)(nil),     // 20: captenpluginspb.GetGitProjectsForLabelsResponse
	(*AddCloudProviderRequest)(nil),             // 21: captenpluginspb.AddCloudProviderRequest
	(*AddCloudProviderResponse)(nil),            // 22: captenpluginspb.AddCloudProviderResponse
	(*UpdateCloudProviderRequest)(nil),          // 23: captenpluginspb.UpdateCloudProviderRequest
	(*UpdateCloudProviderResponse)(nil),         // 24: captenpluginspb.UpdateCloudProviderResponse
	(*DeleteCloudProviderRequest)(nil),          // 25: captenpluginspb.DeleteCloudProviderRequest
	(*DeleteCloudProviderResponse)(nil),         // 26: captenpluginspb.DeleteCloudProviderResponse
	(*GetCloudProvidersRequest)(nil),            // 27: captenpluginspb.GetCloudProvidersRequest
	(*CloudProvider)(nil),                       // 28: captenpluginspb.CloudProvider
	(*GetCloudProvidersResponse)(nil),           // 29: captenpluginspb.GetCloudProvidersResponse
	(*GetCloudProvidersWithFilterRequest)(nil),  // 30: captenpluginspb.GetCloudProvidersWithFilterRequest
	(*GetCloudProvidersWithFilterResponse)(nil), // 31: captenpluginspb.GetCloudProvidersWithFilterResponse
	(*RegisterArgoCDProjectRequest)(nil),        // 32: captenpluginspb.RegisterArgoCDProjectRequest
	(*RegisterArgoCDProjectResponse)(nil),       // 33: captenpluginspb.RegisterArgoCDProjectResponse
	(*GetArgoCDProjectsRequest)(nil),            // 34: captenpluginspb.GetArgoCDProjectsRequest
	(*GetArgoCDProjectsResponse)(nil),           // 35: captenpluginspb.GetArgoCDProjectsResponse
	(*UnRegisterArgoCDProjectRequest)(nil),      // 36: captenpluginspb.UnRegisterArgoCDProjectRequest
	(*UnRegisterArgoCDProjectResponse)(nil),     // 37: captenpluginspb.UnRegisterArgoCDProjectResponse
	(*ArgoCDProject)(nil),                       // 38: captenpluginspb.ArgoCDProject
	(*RegisterTektonProjectRequest)(nil),        // 39: captenpluginspb.RegisterTektonProjectRequest
	(*RegisterTektonProjectResponse)(nil),       // 40: captenpluginspb.RegisterTektonProjectResponse
	(*UnRegisterTektonProjectRequest)(nil),      // 41: captenpluginspb.UnRegisterTektonProjectRequest
	(*UnRegisterTektonProjectResponse)(nil),     // 42: captenpluginspb.UnRegisterTektonProjectResponse
	(*TektonProject)(nil),                       // 43: captenpluginspb.TektonProject
	(*GetTektonProjectsRequest)(nil),            // 44: captenpluginspb.GetTektonProjectsRequest
	(*GetTektonProjectsResponse)(nil),           // 45: captenpluginspb.GetTektonProjectsResponse
	(*CaptenPlugin)(nil),                        // 46: captenpluginspb.CaptenPlugin
	(*GetCaptenPluginsRequest)(nil),             // 47: captenpluginspb.GetCaptenPluginsRequest
	(*GetCaptenPluginsResponse)(nil),            // 48: captenpluginspb.GetCaptenPluginsResponse
	(*RegisterCrossplaneProjectRequest)(nil),    // 49: captenpluginspb.RegisterCrossplaneProjectRequest
	(*RegisterCrossplaneProjectResponse)(nil),   // 50: captenpluginspb.RegisterCrossplaneProjectResponse
	(*UnRegisterCrossplaneProjectRequest)(nil),  // 51: captenpluginspb.UnRegisterCrossplaneProjectRequest
	(*UnRegisterCrossplaneProjectResponse)(nil), // 52: captenpluginspb.UnRegisterCrossplaneProjectResponse
	(*CrossplaneProject)(nil),                   // 53: captenpluginspb.CrossplaneProject
	(*GetCrossplaneProjectsRequest)(nil),        // 54: captenpluginspb.GetCrossplaneProjectsRequest
	(*GetCrossplaneProjectsResponse)(nil),       // 55: captenpluginspb.GetCrossplaneProjectsResponse
	nil,                                         // 56: captenpluginspb.AddCloudProviderRequest.CloudAttributesEntry
	nil,                                         // 57: captenpluginspb.UpdateCloudProviderRequest.CloudAttributesEntry
	nil,                                         // 58: captenpluginspb.CloudProvider.CloudAttributesEntry
}
var file_capten_plugins_proto_depIdxs = []int32{
	0,  // 0: captenpluginspb.UpdateCrossplanProviderResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 1: captenpluginspb.DeleteCrossplanProviderResponse.status:type_name -> captenpluginspb.StatusCode
	7,  // 2: captenpluginspb.GetCrossplanProvidersResponse.providers:type_name -> captenpluginspb.CrossplaneProvider
	0,  // 3: captenpluginspb.GetCrossplanProvidersResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 4: captenpluginspb.AddCrossplanProviderResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 5: captenpluginspb.AddGitProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 6: captenpluginspb.UpdateGitProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 7: captenpluginspb.DeleteGitProjectResponse.status:type_name -> captenpluginspb.StatusCode
	17, // 8: captenpluginspb.GetGitProjectsResponse.projects:type_name -> captenpluginspb.GitProject
	0,  // 9: captenpluginspb.GetGitProjectsResponse.status:type_name -> captenpluginspb.StatusCode
	17, // 10: captenpluginspb.GetGitProjectsForLabelsResponse.projects:type_name -> captenpluginspb.GitProject
	0,  // 11: captenpluginspb.GetGitProjectsForLabelsResponse.status:type_name -> captenpluginspb.StatusCode
	56, // 12: captenpluginspb.AddCloudProviderRequest.cloudAttributes:type_name -> captenpluginspb.AddCloudProviderRequest.CloudAttributesEntry
	0,  // 13: captenpluginspb.AddCloudProviderResponse.status:type_name -> captenpluginspb.StatusCode
	57, // 14: captenpluginspb.UpdateCloudProviderRequest.cloudAttributes:type_name -> captenpluginspb.UpdateCloudProviderRequest.CloudAttributesEntry
	0,  // 15: captenpluginspb.UpdateCloudProviderResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 16: captenpluginspb.DeleteCloudProviderResponse.status:type_name -> captenpluginspb.StatusCode
	58, // 17: captenpluginspb.CloudProvider.cloudAttributes:type_name -> captenpluginspb.CloudProvider.CloudAttributesEntry
	28, // 18: captenpluginspb.GetCloudProvidersResponse.cloudProviders:type_name -> captenpluginspb.CloudProvider
	0,  // 19: captenpluginspb.GetCloudProvidersResponse.status:type_name -> captenpluginspb.StatusCode
	28, // 20: captenpluginspb.GetCloudProvidersWithFilterResponse.cloudProviders:type_name -> captenpluginspb.CloudProvider
	0,  // 21: captenpluginspb.GetCloudProvidersWithFilterResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 22: captenpluginspb.RegisterArgoCDProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 23: captenpluginspb.GetArgoCDProjectsResponse.status:type_name -> captenpluginspb.StatusCode
	38, // 24: captenpluginspb.GetArgoCDProjectsResponse.projects:type_name -> captenpluginspb.ArgoCDProject
	0,  // 25: captenpluginspb.UnRegisterArgoCDProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 26: captenpluginspb.RegisterTektonProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 27: captenpluginspb.UnRegisterTektonProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 28: captenpluginspb.GetTektonProjectsResponse.status:type_name -> captenpluginspb.StatusCode
	43, // 29: captenpluginspb.GetTektonProjectsResponse.projects:type_name -> captenpluginspb.TektonProject
	0,  // 30: captenpluginspb.GetCaptenPluginsResponse.status:type_name -> captenpluginspb.StatusCode
	46, // 31: captenpluginspb.GetCaptenPluginsResponse.plugins:type_name -> captenpluginspb.CaptenPlugin
	0,  // 32: captenpluginspb.RegisterCrossplaneProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 33: captenpluginspb.UnRegisterCrossplaneProjectResponse.status:type_name -> captenpluginspb.StatusCode
	0,  // 34: captenpluginspb.GetCrossplaneProjectsResponse.status:type_name -> captenpluginspb.StatusCode
	53, // 35: captenpluginspb.GetCrossplaneProjectsResponse.project:type_name -> captenpluginspb.CrossplaneProject
	47, // 36: captenpluginspb.capten_plugins.GetCaptenPlugins:input_type -> captenpluginspb.GetCaptenPluginsRequest
	10, // 37: captenpluginspb.capten_plugins.AddGitProject:input_type -> captenpluginspb.AddGitProjectRequest
	12, // 38: captenpluginspb.capten_plugins.UpdateGitProject:input_type -> captenpluginspb.UpdateGitProjectRequest
	14, // 39: captenpluginspb.capten_plugins.DeleteGitProject:input_type -> captenpluginspb.DeleteGitProjectRequest
	16, // 40: captenpluginspb.capten_plugins.GetGitProjects:input_type -> captenpluginspb.GetGitProjectsRequest
	19, // 41: captenpluginspb.capten_plugins.GetGitProjectsForLabels:input_type -> captenpluginspb.GetGitProjectsForLabelsRequest
	21, // 42: captenpluginspb.capten_plugins.AddCloudProvider:input_type -> captenpluginspb.AddCloudProviderRequest
	23, // 43: captenpluginspb.capten_plugins.UpdateCloudProvider:input_type -> captenpluginspb.UpdateCloudProviderRequest
	25, // 44: captenpluginspb.capten_plugins.DeleteCloudProvider:input_type -> captenpluginspb.DeleteCloudProviderRequest
	27, // 45: captenpluginspb.capten_plugins.GetCloudProviders:input_type -> captenpluginspb.GetCloudProvidersRequest
	30, // 46: captenpluginspb.capten_plugins.GetCloudProvidersWithFilter:input_type -> captenpluginspb.GetCloudProvidersWithFilterRequest
	32, // 47: captenpluginspb.capten_plugins.RegisterArgoCDProject:input_type -> captenpluginspb.RegisterArgoCDProjectRequest
	34, // 48: captenpluginspb.capten_plugins.GetArgoCDProjects:input_type -> captenpluginspb.GetArgoCDProjectsRequest
	36, // 49: captenpluginspb.capten_plugins.UnRegisterArgoCDProject:input_type -> captenpluginspb.UnRegisterArgoCDProjectRequest
	39, // 50: captenpluginspb.capten_plugins.RegisterTektonProject:input_type -> captenpluginspb.RegisterTektonProjectRequest
	44, // 51: captenpluginspb.capten_plugins.GetTektonProjects:input_type -> captenpluginspb.GetTektonProjectsRequest
	41, // 52: captenpluginspb.capten_plugins.UnRegisterTektonProject:input_type -> captenpluginspb.UnRegisterTektonProjectRequest
	8,  // 53: captenpluginspb.capten_plugins.AddCrossplanProvider:input_type -> captenpluginspb.AddCrossplanProviderRequest
	3,  // 54: captenpluginspb.capten_plugins.DeleteCrossplanProvider:input_type -> captenpluginspb.DeleteCrossplanProviderRequest
	5,  // 55: captenpluginspb.capten_plugins.GetCrossplanProviders:input_type -> captenpluginspb.GetCrossplanProvidersRequest
	1,  // 56: captenpluginspb.capten_plugins.UpdateCrossplanProvider:input_type -> captenpluginspb.UpdateCrossplanProviderRequest
	49, // 57: captenpluginspb.capten_plugins.RegisterCrossplaneProject:input_type -> captenpluginspb.RegisterCrossplaneProjectRequest
	54, // 58: captenpluginspb.capten_plugins.GetCrossplaneProject:input_type -> captenpluginspb.GetCrossplaneProjectsRequest
	51, // 59: captenpluginspb.capten_plugins.UnRegisterCrossplaneProject:input_type -> captenpluginspb.UnRegisterCrossplaneProjectRequest
	48, // 60: captenpluginspb.capten_plugins.GetCaptenPlugins:output_type -> captenpluginspb.GetCaptenPluginsResponse
	11, // 61: captenpluginspb.capten_plugins.AddGitProject:output_type -> captenpluginspb.AddGitProjectResponse
	13, // 62: captenpluginspb.capten_plugins.UpdateGitProject:output_type -> captenpluginspb.UpdateGitProjectResponse
	15, // 63: captenpluginspb.capten_plugins.DeleteGitProject:output_type -> captenpluginspb.DeleteGitProjectResponse
	18, // 64: captenpluginspb.capten_plugins.GetGitProjects:output_type -> captenpluginspb.GetGitProjectsResponse
	20, // 65: captenpluginspb.capten_plugins.GetGitProjectsForLabels:output_type -> captenpluginspb.GetGitProjectsForLabelsResponse
	22, // 66: captenpluginspb.capten_plugins.AddCloudProvider:output_type -> captenpluginspb.AddCloudProviderResponse
	24, // 67: captenpluginspb.capten_plugins.UpdateCloudProvider:output_type -> captenpluginspb.UpdateCloudProviderResponse
	26, // 68: captenpluginspb.capten_plugins.DeleteCloudProvider:output_type -> captenpluginspb.DeleteCloudProviderResponse
	29, // 69: captenpluginspb.capten_plugins.GetCloudProviders:output_type -> captenpluginspb.GetCloudProvidersResponse
	31, // 70: captenpluginspb.capten_plugins.GetCloudProvidersWithFilter:output_type -> captenpluginspb.GetCloudProvidersWithFilterResponse
	33, // 71: captenpluginspb.capten_plugins.RegisterArgoCDProject:output_type -> captenpluginspb.RegisterArgoCDProjectResponse
	35, // 72: captenpluginspb.capten_plugins.GetArgoCDProjects:output_type -> captenpluginspb.GetArgoCDProjectsResponse
	37, // 73: captenpluginspb.capten_plugins.UnRegisterArgoCDProject:output_type -> captenpluginspb.UnRegisterArgoCDProjectResponse
	40, // 74: captenpluginspb.capten_plugins.RegisterTektonProject:output_type -> captenpluginspb.RegisterTektonProjectResponse
	45, // 75: captenpluginspb.capten_plugins.GetTektonProjects:output_type -> captenpluginspb.GetTektonProjectsResponse
	42, // 76: captenpluginspb.capten_plugins.UnRegisterTektonProject:output_type -> captenpluginspb.UnRegisterTektonProjectResponse
	9,  // 77: captenpluginspb.capten_plugins.AddCrossplanProvider:output_type -> captenpluginspb.AddCrossplanProviderResponse
	4,  // 78: captenpluginspb.capten_plugins.DeleteCrossplanProvider:output_type -> captenpluginspb.DeleteCrossplanProviderResponse
	6,  // 79: captenpluginspb.capten_plugins.GetCrossplanProviders:output_type -> captenpluginspb.GetCrossplanProvidersResponse
	2,  // 80: captenpluginspb.capten_plugins.UpdateCrossplanProvider:output_type -> captenpluginspb.UpdateCrossplanProviderResponse
	50, // 81: captenpluginspb.capten_plugins.RegisterCrossplaneProject:output_type -> captenpluginspb.RegisterCrossplaneProjectResponse
	55, // 82: captenpluginspb.capten_plugins.GetCrossplaneProject:output_type -> captenpluginspb.GetCrossplaneProjectsResponse
	52, // 83: captenpluginspb.capten_plugins.UnRegisterCrossplaneProject:output_type -> captenpluginspb.UnRegisterCrossplaneProjectResponse
	60, // [60:84] is the sub-list for method output_type
	36, // [36:60] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_capten_plugins_proto_init() }
func file_capten_plugins_proto_init() {
	if File_capten_plugins_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_capten_plugins_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCrossplanProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCrossplanProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrossplanProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrossplanProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossplanProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossplanProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossplaneProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCrossplanProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCrossplanProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGitProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGitProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGitProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGitProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitProjectsForLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitProjectsForLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCloudProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCloudProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudProvidersWithFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudProvidersWithFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArgoCDProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArgoCDProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArgoCDProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArgoCDProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterArgoCDProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterArgoCDProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTektonProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTektonProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterTektonProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterTektonProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TektonProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTektonProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTektonProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptenPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCaptenPluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCaptenPluginsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCrossplaneProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCrossplaneProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterCrossplaneProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnRegisterCrossplaneProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossplaneProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossplaneProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capten_plugins_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossplaneProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_capten_plugins_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_capten_plugins_proto_goTypes,
		DependencyIndexes: file_capten_plugins_proto_depIdxs,
		EnumInfos:         file_capten_plugins_proto_enumTypes,
		MessageInfos:      file_capten_plugins_proto_msgTypes,
	}.Build()
	File_capten_plugins_proto = out.File
	file_capten_plugins_proto_rawDesc = nil
	file_capten_plugins_proto_goTypes = nil
	file_capten_plugins_proto_depIdxs = nil
}
