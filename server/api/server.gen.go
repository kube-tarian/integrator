// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// AgentAppsRequest defines model for AgentAppsRequest.
type AgentAppsRequest struct {
	Apps *[]struct {
		ChartName   *string `json:"chartName,omitempty"`
		Name        *string `json:"name,omitempty"`
		Namespace   *string `json:"namespace,omitempty"`
		Override    *string `json:"override,omitempty"`
		ReleaseName *string `json:"releaseName,omitempty"`
		RepoName    *string `json:"repoName,omitempty"`
		RepoURL     *string `json:"repoURL,omitempty"`
		Version     *string `json:"version,omitempty"`
	} `json:"apps,omitempty"`
}

// AgentRequest defines model for AgentRequest.
type AgentRequest struct {
	CaCrt     []openapi_types.File `json:"ca_crt"`
	ClientCrt []openapi_types.File `json:"client_crt"`
	ClientKey []openapi_types.File `json:"client_key"`
}

// AgentResponse defines model for AgentResponse.
type AgentResponse struct {
	CustomerId string `json:"customer_id"`
	Endpoint   string `json:"endpoint"`
}

// ClimonDeleteRequest defines model for ClimonDeleteRequest.
type ClimonDeleteRequest struct {
	// ClusterName Cluster in which to be deleted, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`
	CustomerId  string  `json:"customer_id"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`
}

// ClimonPostRequest defines model for ClimonPostRequest.
type ClimonPostRequest struct {
	// ChartName Chart name in Repository
	ChartName string `json:"chart_name"`

	// ClusterName Cluster in which to be installed, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// RepoName Repository name
	RepoName string `json:"repo_name"`

	// RepoUrl Repository URL
	RepoUrl string `json:"repo_url"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`

	// Version Version of the chart
	Version *string `json:"version,omitempty"`
}

// ClusterRequest defines model for ClusterRequest.
type ClusterRequest struct {
	ClusterName string `json:"cluster_name"`
	CustomerId  string `json:"customer_id"`
	PluginName  string `json:"plugin_name"`
}

// DeployerDeleteRequest defines model for DeployerDeleteRequest.
type DeployerDeleteRequest struct {
	// ClusterName Cluster in which to be deleted, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`
}

// DeployerPostRequest defines model for DeployerPostRequest.
type DeployerPostRequest struct {
	// ChartName Chart name in Repository
	ChartName string `json:"chart_name"`

	// ClusterName Cluster in which to be installed, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// RepoName Repository name
	RepoName string `json:"repo_name"`

	// RepoUrl Repository URL
	RepoUrl string `json:"repo_url"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`

	// Version Version of the chart
	Version *string `json:"version,omitempty"`
}

// ProjectDeleteRequest defines model for ProjectDeleteRequest.
type ProjectDeleteRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ProjectName Project name to be created in plugin
	ProjectName string `json:"project_name"`
}

// ProjectPostRequest defines model for ProjectPostRequest.
type ProjectPostRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ProjectName Project name to be created in plugin
	ProjectName string `json:"project_name"`
}

// RepositoryDeleteRequest defines model for RepositoryDeleteRequest.
type RepositoryDeleteRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// RepoName Repository to added to plugin
	RepoName string `json:"repo_name"`
}

// RepositoryPostRequest defines model for RepositoryPostRequest.
type RepositoryPostRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// RepoName Repository to added to plugin
	RepoName string `json:"repo_name"`

	// RepoUrl Repository URL
	RepoUrl string `json:"repo_url"`
}

// Response Configuration request response
type Response struct {
	Message string `json:"message"`
	Status  string `json:"status"`
}

// StoreCredRequest defines model for StoreCredRequest.
type StoreCredRequest struct {
	Credname   *string `json:"credname,omitempty"`
	CustomerId *string `json:"customer_id,omitempty"`
	Password   *string `json:"password,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// PostAgentAppsJSONRequestBody defines body for PostAgentApps for application/json ContentType.
type PostAgentAppsJSONRequestBody = AgentAppsRequest

// DeleteAgentClimondeployJSONRequestBody defines body for DeleteAgentClimondeploy for application/json ContentType.
type DeleteAgentClimondeployJSONRequestBody = ClimonDeleteRequest

// PostAgentClimondeployJSONRequestBody defines body for PostAgentClimondeploy for application/json ContentType.
type PostAgentClimondeployJSONRequestBody = ClimonPostRequest

// PutAgentClimondeployJSONRequestBody defines body for PutAgentClimondeploy for application/json ContentType.
type PutAgentClimondeployJSONRequestBody = ClimonPostRequest

// DeleteAgentClusterJSONRequestBody defines body for DeleteAgentCluster for application/json ContentType.
type DeleteAgentClusterJSONRequestBody = ClusterRequest

// PostAgentClusterJSONRequestBody defines body for PostAgentCluster for application/json ContentType.
type PostAgentClusterJSONRequestBody = ClusterRequest

// DeleteAgentDeployJSONRequestBody defines body for DeleteAgentDeploy for application/json ContentType.
type DeleteAgentDeployJSONRequestBody = DeployerDeleteRequest

// PostAgentDeployJSONRequestBody defines body for PostAgentDeploy for application/json ContentType.
type PostAgentDeployJSONRequestBody = DeployerPostRequest

// PutAgentDeployJSONRequestBody defines body for PutAgentDeploy for application/json ContentType.
type PutAgentDeployJSONRequestBody = DeployerPostRequest

// PostAgentEndpointMultipartRequestBody defines body for PostAgentEndpoint for multipart/form-data ContentType.
type PostAgentEndpointMultipartRequestBody = AgentRequest

// PutAgentEndpointJSONRequestBody defines body for PutAgentEndpoint for application/json ContentType.
type PutAgentEndpointJSONRequestBody = AgentRequest

// DeleteAgentProjectJSONRequestBody defines body for DeleteAgentProject for application/json ContentType.
type DeleteAgentProjectJSONRequestBody = ProjectDeleteRequest

// PostAgentProjectJSONRequestBody defines body for PostAgentProject for application/json ContentType.
type PostAgentProjectJSONRequestBody = ProjectPostRequest

// PutAgentProjectJSONRequestBody defines body for PutAgentProject for application/json ContentType.
type PutAgentProjectJSONRequestBody = ProjectPostRequest

// DeleteAgentRepositoryJSONRequestBody defines body for DeleteAgentRepository for application/json ContentType.
type DeleteAgentRepositoryJSONRequestBody = RepositoryDeleteRequest

// PostAgentRepositoryJSONRequestBody defines body for PostAgentRepository for application/json ContentType.
type PostAgentRepositoryJSONRequestBody = RepositoryPostRequest

// PutAgentRepositoryJSONRequestBody defines body for PutAgentRepository for application/json ContentType.
type PutAgentRepositoryJSONRequestBody = RepositoryPostRequest

// PostAgentSecretJSONRequestBody defines body for PostAgentSecret for application/json ContentType.
type PostAgentSecretJSONRequestBody = StoreCredRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// used to update the installed tools
	// (POST /agent/apps)
	PostAgentApps(c *gin.Context)
	// deploy the application
	// (DELETE /agent/climondeploy)
	DeleteAgentClimondeploy(c *gin.Context)
	// deploy the application
	// (POST /agent/climondeploy)
	PostAgentClimondeploy(c *gin.Context)
	// deploy the application
	// (PUT /agent/climondeploy)
	PutAgentClimondeploy(c *gin.Context)
	// Delete the application
	// (DELETE /agent/cluster)
	DeleteAgentCluster(c *gin.Context)
	// deploy the application
	// (POST /agent/cluster)
	PostAgentCluster(c *gin.Context)
	// deploy the application
	// (DELETE /agent/deploy)
	DeleteAgentDeploy(c *gin.Context)
	// deploy the application
	// (POST /agent/deploy)
	PostAgentDeploy(c *gin.Context)
	// deploy the application
	// (PUT /agent/deploy)
	PutAgentDeploy(c *gin.Context)
	// Register agent
	// (GET /agent/endpoint)
	GetAgentEndpoint(c *gin.Context)
	// Register agent
	// (POST /agent/endpoint)
	PostAgentEndpoint(c *gin.Context)
	// Register agent
	// (PUT /agent/endpoint)
	PutAgentEndpoint(c *gin.Context)
	// deploy the application
	// (DELETE /agent/project)
	DeleteAgentProject(c *gin.Context)
	// deploy the application
	// (POST /agent/project)
	PostAgentProject(c *gin.Context)
	// deploy the application
	// (PUT /agent/project)
	PutAgentProject(c *gin.Context)
	// deploy the application
	// (DELETE /agent/repository)
	DeleteAgentRepository(c *gin.Context)
	// deploy the application
	// (POST /agent/repository)
	PostAgentRepository(c *gin.Context)
	// deploy the application
	// (PUT /agent/repository)
	PutAgentRepository(c *gin.Context)
	// to store the credentials in agent vault
	// (POST /agent/secret)
	PostAgentSecret(c *gin.Context)
	// List of APIs provided by the service
	// (GET /api-docs)
	GetApiDocs(c *gin.Context)
	// Kubernetes readiness and liveness probe endpoint
	// (GET /status)
	GetStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAgentApps operation middleware
func (siw *ServerInterfaceWrapper) PostAgentApps(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentApps(c)
}

// DeleteAgentClimondeploy operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentClimondeploy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAgentClimondeploy(c)
}

// PostAgentClimondeploy operation middleware
func (siw *ServerInterfaceWrapper) PostAgentClimondeploy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentClimondeploy(c)
}

// PutAgentClimondeploy operation middleware
func (siw *ServerInterfaceWrapper) PutAgentClimondeploy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutAgentClimondeploy(c)
}

// DeleteAgentCluster operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentCluster(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAgentCluster(c)
}

// PostAgentCluster operation middleware
func (siw *ServerInterfaceWrapper) PostAgentCluster(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentCluster(c)
}

// DeleteAgentDeploy operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentDeploy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAgentDeploy(c)
}

// PostAgentDeploy operation middleware
func (siw *ServerInterfaceWrapper) PostAgentDeploy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentDeploy(c)
}

// PutAgentDeploy operation middleware
func (siw *ServerInterfaceWrapper) PutAgentDeploy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutAgentDeploy(c)
}

// GetAgentEndpoint operation middleware
func (siw *ServerInterfaceWrapper) GetAgentEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAgentEndpoint(c)
}

// PostAgentEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PostAgentEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentEndpoint(c)
}

// PutAgentEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PutAgentEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutAgentEndpoint(c)
}

// DeleteAgentProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentProject(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAgentProject(c)
}

// PostAgentProject operation middleware
func (siw *ServerInterfaceWrapper) PostAgentProject(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentProject(c)
}

// PutAgentProject operation middleware
func (siw *ServerInterfaceWrapper) PutAgentProject(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutAgentProject(c)
}

// DeleteAgentRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgentRepository(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAgentRepository(c)
}

// PostAgentRepository operation middleware
func (siw *ServerInterfaceWrapper) PostAgentRepository(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentRepository(c)
}

// PutAgentRepository operation middleware
func (siw *ServerInterfaceWrapper) PutAgentRepository(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutAgentRepository(c)
}

// PostAgentSecret operation middleware
func (siw *ServerInterfaceWrapper) PostAgentSecret(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAgentSecret(c)
}

// GetApiDocs operation middleware
func (siw *ServerInterfaceWrapper) GetApiDocs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiDocs(c)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/agent/apps", wrapper.PostAgentApps)

	router.DELETE(options.BaseURL+"/agent/climondeploy", wrapper.DeleteAgentClimondeploy)

	router.POST(options.BaseURL+"/agent/climondeploy", wrapper.PostAgentClimondeploy)

	router.PUT(options.BaseURL+"/agent/climondeploy", wrapper.PutAgentClimondeploy)

	router.DELETE(options.BaseURL+"/agent/cluster", wrapper.DeleteAgentCluster)

	router.POST(options.BaseURL+"/agent/cluster", wrapper.PostAgentCluster)

	router.DELETE(options.BaseURL+"/agent/deploy", wrapper.DeleteAgentDeploy)

	router.POST(options.BaseURL+"/agent/deploy", wrapper.PostAgentDeploy)

	router.PUT(options.BaseURL+"/agent/deploy", wrapper.PutAgentDeploy)

	router.GET(options.BaseURL+"/agent/endpoint", wrapper.GetAgentEndpoint)

	router.POST(options.BaseURL+"/agent/endpoint", wrapper.PostAgentEndpoint)

	router.PUT(options.BaseURL+"/agent/endpoint", wrapper.PutAgentEndpoint)

	router.DELETE(options.BaseURL+"/agent/project", wrapper.DeleteAgentProject)

	router.POST(options.BaseURL+"/agent/project", wrapper.PostAgentProject)

	router.PUT(options.BaseURL+"/agent/project", wrapper.PutAgentProject)

	router.DELETE(options.BaseURL+"/agent/repository", wrapper.DeleteAgentRepository)

	router.POST(options.BaseURL+"/agent/repository", wrapper.PostAgentRepository)

	router.PUT(options.BaseURL+"/agent/repository", wrapper.PutAgentRepository)

	router.POST(options.BaseURL+"/agent/secret", wrapper.PostAgentSecret)

	router.GET(options.BaseURL+"/api-docs", wrapper.GetApiDocs)

	router.GET(options.BaseURL+"/status", wrapper.GetStatus)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
