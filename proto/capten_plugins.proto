syntax = "proto3";

option go_package = "/captenpluginspb";

package captenpluginspb;

service capten_plugins {
    rpc GetCaptenPlugins(GetCaptenPluginsRequest) returns (GetCaptenPluginsResponse) {}

    rpc AddGitProject(AddGitProjectRequest) returns (AddGitProjectResponse) {}
    rpc UpdateGitProject(UpdateGitProjectRequest) returns (UpdateGitProjectResponse) {}
    rpc DeleteGitProject(DeleteGitProjectRequest) returns (DeleteGitProjectResponse) {}
    rpc GetGitProjects(GetGitProjectsRequest) returns (GetGitProjectsResponse) {}
    rpc GetGitProjectsForLabels(GetGitProjectsForLabelsRequest) returns (GetGitProjectsForLabelsResponse) {}

    rpc AddCloudProvider(AddCloudProviderRequest) returns (AddCloudProviderResponse) {}
    rpc UpdateCloudProvider(UpdateCloudProviderRequest) returns (UpdateCloudProviderResponse) {}
    rpc DeleteCloudProvider(DeleteCloudProviderRequest) returns (DeleteCloudProviderResponse) {}
    rpc GetCloudProviders(GetCloudProvidersRequest) returns (GetCloudProvidersResponse) {}
    rpc GetCloudProvidersWithFilter(GetCloudProvidersWithFilterRequest) returns (GetCloudProvidersWithFilterResponse) {}

    rpc RegisterArgoCDProject(RegisterArgoCDProjectRequest) returns (RegisterArgoCDProjectResponse) {}
    rpc GetArgoCDProjects(GetArgoCDProjectsRequest) returns (GetArgoCDProjectsResponse) {}
    rpc UnRegisterArgoCDProject(UnRegisterArgoCDProjectRequest) returns (UnRegisterArgoCDProjectResponse) {}

    rpc RegisterTektonProject(RegisterTektonProjectRequest) returns (RegisterTektonProjectResponse) {}
    rpc GetTektonProjects(GetTektonProjectsRequest) returns (GetTektonProjectsResponse) {}
    rpc UnRegisterTektonProject(UnRegisterTektonProjectRequest) returns (UnRegisterTektonProjectResponse) {}

    rpc AddCrossplanProvider(AddCrossplanProviderRequest) returns(AddCrossplanProviderResponse){}
    rpc DeleteCrossplanProvider(DeleteCrossplanProviderRequest) returns(DeleteCrossplanProviderResponse) {}
    rpc GetCrossplanProviders(GetCrossplanProvidersRequest) returns(GetCrossplanProvidersResponse) {}
    rpc UpdateCrossplanProvider(UpdateCrossplanProviderRequest) returns(UpdateCrossplanProviderResponse) {}

    rpc RegisterCrossplaneProject(RegisterCrossplaneProjectRequest) returns (RegisterCrossplaneProjectResponse) {}
    rpc GetCrossplaneProject(GetCrossplaneProjectsRequest) returns (GetCrossplaneProjectsResponse) {}
    rpc UnRegisterCrossplaneProject(UnRegisterCrossplaneProjectRequest) returns (UnRegisterCrossplaneProjectResponse) {}
}

enum StatusCode {
    OK = 0;
    INTERNAL_ERROR = 1;
    INVALID_ARGUMENT = 2;
    NOT_FOUND = 3;
}

message UpdateCrossplanProviderRequest{
    string id = 1;
    string cloudType = 2;
    string providerName = 3;
    string cloudProviderId = 4;
}

message UpdateCrossplanProviderResponse{
    StatusCode status = 1;
    string statusMessage = 2;
}

message DeleteCrossplanProviderRequest {
    string id = 1;
}

message DeleteCrossplanProviderResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message GetCrossplanProvidersRequest {
}

message GetCrossplanProvidersResponse {
    repeated CrossplaneProvider providers = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message CrossplaneProvider {
    string id = 1;
    string cloudType = 2;
    string providerName = 3;
    string cloudProviderId = 4;
    string status = 5;
}

message AddCrossplanProviderRequest {
    string cloudType = 1;
    string providerName = 2;
    string cloudProviderId = 3;
}

message AddCrossplanProviderResponse {
    string id = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message AddGitProjectRequest {
    string projectUrl = 1;
    repeated string labels = 2;
    string accessToken = 3;
}

message AddGitProjectResponse {
    string id = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message UpdateGitProjectRequest {
    string id = 1;
    string projectUrl = 2;
    repeated string labels = 3;
    string accessToken = 4;
}

message UpdateGitProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message DeleteGitProjectRequest {
    string id = 1;
}

message DeleteGitProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message GetGitProjectsRequest {
}

message GitProject {
    string id = 1;
    string projectUrl = 2;
    repeated string labels = 3;
    string lastUpdateTime = 4;
    string accessToken = 5;
}

message GetGitProjectsResponse {
    repeated GitProject projects = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message GetGitProjectsForLabelsRequest {
    repeated string labels = 1;
}

message GetGitProjectsForLabelsResponse {
    repeated GitProject projects = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message AddCloudProviderRequest {
    string cloudType = 1;
    repeated string labels = 2;
    map<string, string> cloudAttributes = 3;
}

message AddCloudProviderResponse {
    string id = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message UpdateCloudProviderRequest {
    string id = 1;
    string cloudType = 2;
    repeated string labels = 3;
    map<string, string> cloudAttributes = 4;
}

message UpdateCloudProviderResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message DeleteCloudProviderRequest {
    string id = 1;
}

message DeleteCloudProviderResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message GetCloudProvidersRequest {
}

message CloudProvider {
    string id = 1;
    string cloudType = 2;
    repeated string labels = 3;
    string lastUpdateTime = 4;
    map<string, string> cloudAttributes = 5;
}

message GetCloudProvidersResponse {
    repeated CloudProvider cloudProviders = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message GetCloudProvidersWithFilterRequest {
    repeated string labels = 1;
    string cloudType = 2;
}

message GetCloudProvidersWithFilterResponse {
    repeated CloudProvider cloudProviders = 1;
    StatusCode status = 2;
    string statusMessage = 3;
}

message RegisterArgoCDProjectRequest {
    string id = 1;
}

message RegisterArgoCDProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message GetArgoCDProjectsRequest {
}

message GetArgoCDProjectsResponse {
    StatusCode status = 1;
    string statusMessage = 2;
    repeated ArgoCDProject projects = 3;
}

message UnRegisterArgoCDProjectRequest {
    string id = 1;
}

message UnRegisterArgoCDProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message ArgoCDProject {
    string id = 1;
    string projectUrl = 2;
    string status = 3;
    string lastUpdateTime = 4;
}

message RegisterTektonProjectRequest {
    string id = 1;
}

message RegisterTektonProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message UnRegisterTektonProjectRequest {
    string id = 1;
}

message UnRegisterTektonProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message TektonProject {
    string id = 1;
    string gitProjectUrl = 2;
    string status = 3;
    string lastUpdateTime = 4;
}

message GetTektonProjectsRequest {
}

message GetTektonProjectsResponse {
    StatusCode status = 1;
    string statusMessage = 2;
    repeated TektonProject projects = 3;
}

message CaptenPlugin {
    string pluginName = 1;
    string pluginDescription = 2;
    string launchURL = 3;
    bytes launchIcon = 4;
    string installStatus = 5;
    string runtimeStatus = 6;
}

message GetCaptenPluginsRequest {
}

message GetCaptenPluginsResponse {
    StatusCode status = 1;
    string statusMessage = 2;
    repeated CaptenPlugin plugins = 3;
}

// Crossplane projects

message RegisterCrossplaneProjectRequest {
    string id = 1;
}

message RegisterCrossplaneProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message UnRegisterCrossplaneProjectRequest {
    string id = 1;
}

message UnRegisterCrossplaneProjectResponse {
    StatusCode status = 1;
    string statusMessage = 2;
}

message CrossplaneProject {
    string id = 1;
    string gitProjectUrl = 2;
    string status = 3;
    string lastUpdateTime = 4;
}

message GetCrossplaneProjectsRequest {
}

message GetCrossplaneProjectsResponse {
    StatusCode status = 1;
    string statusMessage = 2;
    CrossplaneProject project = 3;
}
